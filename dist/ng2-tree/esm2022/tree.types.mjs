import { defaultsDeep, get, omit } from './utils/fn.utils';
export class FoldingType {
  _cssClass;
  static Expanded = new FoldingType('node-expanded');
  static Collapsed = new FoldingType('node-collapsed');
  static Empty = new FoldingType('node-empty');
  static Leaf = new FoldingType('node-leaf');
  constructor(_cssClass) {
    this._cssClass = _cssClass;
  }
  get cssClass() {
    return this._cssClass;
  }
}
export class TreeModelSettings {
  /* cssClasses - set custom css classes which will be used for a tree */
  cssClasses;
  /* Templates - set custom html templates to be used in a tree */
  templates;
  /**
   * "leftMenu" property when set to true makes left menu available.
   * @name TreeModelSettings#leftMenu
   * @type boolean
   * @default false
   */
  leftMenu;
  /**
   * "rightMenu" property when set to true makes right menu available.
   * @name TreeModelSettings#rightMenu
   * @type boolean
   * @default true
   */
  rightMenu;
  /**
   * "menu" property when set will be available as custom context menu.
   * @name TreeModelSettings#MenuItems
   * @type NodeMenuItem
   */
  menuItems;
  /**
   * "static" property when set to true makes it impossible to drag'n'drop tree or call a menu on it.
   * @name TreeModelSettings#static
   * @type boolean
   * @default false
   */
  static;
  isCollapsedOnInit;
  checked;
  selectionAllowed;
  keepNodesInDOM;
  static NOT_CASCADING_SETTINGS = ['selectionAllowed'];
  static merge(child, parent) {
    const parentCascadingSettings = omit(get(parent, 'settings'), TreeModelSettings.NOT_CASCADING_SETTINGS);
    return defaultsDeep({}, get(child, 'settings'), parentCascadingSettings, {
      static: false,
      leftMenu: false,
      rightMenu: true,
      isCollapsedOnInit: false,
      checked: false,
      keepNodesInDOM: false,
      selectionAllowed: true
    });
  }
}
export class Ng2TreeSettings {
  /**
   * Indicates root visibility in the tree. When true - root is invisible.
   * @name Ng2TreeSettings#rootIsVisible
   * @type boolean
   */
  rootIsVisible = true;
  showCheckboxes = false;
  enableCheckboxes = true;
}
export var TreeStatus;
(function(TreeStatus) {
  TreeStatus[(TreeStatus['New'] = 0)] = 'New';
  TreeStatus[(TreeStatus['Modified'] = 1)] = 'Modified';
  TreeStatus[(TreeStatus['IsBeingRenamed'] = 2)] = 'IsBeingRenamed';
})(TreeStatus || (TreeStatus = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS50eXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmVlLnR5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzNELE1BQU0sT0FBTyxXQUFXO0lBTUs7SUFMcEIsTUFBTSxDQUFDLFFBQVEsR0FBZ0IsSUFBSSxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDaEUsTUFBTSxDQUFDLFNBQVMsR0FBZ0IsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsS0FBSyxHQUFnQixJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxRCxNQUFNLENBQUMsSUFBSSxHQUFnQixJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUUvRCxZQUEyQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQUcsQ0FBQztJQUVoRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7O0FBMENILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsdUVBQXVFO0lBQ2hFLFVBQVUsQ0FBYztJQUUvQixnRUFBZ0U7SUFDekQsU0FBUyxDQUFhO0lBRTdCOzs7OztPQUtHO0lBQ0ksUUFBUSxDQUFXO0lBRTFCOzs7OztPQUtHO0lBQ0ksU0FBUyxDQUFXO0lBRTNCOzs7O09BSUc7SUFDSSxTQUFTLENBQWtCO0lBRWxDOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFXO0lBRWpCLGlCQUFpQixDQUFXO0lBRTVCLE9BQU8sQ0FBVztJQUVsQixnQkFBZ0IsQ0FBVztJQUUzQixjQUFjLENBQVc7SUFFekIsTUFBTSxDQUFVLHNCQUFzQixHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUU5RCxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWdCLEVBQUUsTUFBaUI7UUFDckQsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3hHLE9BQU8sWUFBWSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLHVCQUF1QixFQUFFO1lBQ3ZFLE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLEtBQUs7WUFDZixTQUFTLEVBQUUsSUFBSTtZQUNmLGlCQUFpQixFQUFFLEtBQUs7WUFDeEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxjQUFjLEVBQUUsS0FBSztZQUNyQixnQkFBZ0IsRUFBRSxJQUFJO1NBQ3ZCLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBR0gsTUFBTSxPQUFPLGVBQWU7SUFDMUI7Ozs7T0FJRztJQUNILGFBQWEsR0FBSSxJQUFJLENBQUM7SUFDdEIsY0FBYyxHQUFJLEtBQUssQ0FBQztJQUN4QixnQkFBZ0IsR0FBSSxJQUFJLENBQUM7Q0FDMUI7QUFFRCxNQUFNLENBQU4sSUFBWSxVQUlYO0FBSkQsV0FBWSxVQUFVO0lBQ3BCLHlDQUFHLENBQUE7SUFDSCxtREFBUSxDQUFBO0lBQ1IsK0RBQWMsQ0FBQTtBQUNoQixDQUFDLEVBSlcsVUFBVSxLQUFWLFVBQVUsUUFJckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0c0RlZXAsIGdldCwgb21pdCB9IGZyb20gJy4vdXRpbHMvZm4udXRpbHMnO1xyXG5pbXBvcnQgeyBOb2RlTWVudUl0ZW0gfSBmcm9tICcuL21lbnUvbm9kZS1tZW51LmNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRm9sZGluZ1R5cGUge1xyXG4gIHB1YmxpYyBzdGF0aWMgRXhwYW5kZWQ6IEZvbGRpbmdUeXBlID0gbmV3IEZvbGRpbmdUeXBlKCdub2RlLWV4cGFuZGVkJyk7XHJcbiAgcHVibGljIHN0YXRpYyBDb2xsYXBzZWQ6IEZvbGRpbmdUeXBlID0gbmV3IEZvbGRpbmdUeXBlKCdub2RlLWNvbGxhcHNlZCcpO1xyXG4gIHB1YmxpYyBzdGF0aWMgRW1wdHk6IEZvbGRpbmdUeXBlID0gbmV3IEZvbGRpbmdUeXBlKCdub2RlLWVtcHR5Jyk7XHJcbiAgcHVibGljIHN0YXRpYyBMZWFmOiBGb2xkaW5nVHlwZSA9IG5ldyBGb2xkaW5nVHlwZSgnbm9kZS1sZWFmJyk7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jc3NDbGFzczogc3RyaW5nKSB7fVxyXG5cclxuICBwdWJsaWMgZ2V0IGNzc0NsYXNzKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fY3NzQ2xhc3M7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDaGlsZHJlbkxvYWRpbmdGdW5jdGlvbiA9IChjYWxsYmFjazogKGNoaWxkcmVuOiBUcmVlTW9kZWxbXSkgPT4gdm9pZCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJlZU1vZGVsIHtcclxuICB2YWx1ZTogc3RyaW5nIHwgUmVuYW1hYmxlTm9kZTtcclxuICBpZD86IHN0cmluZyB8IG51bWJlcjtcclxuICBjaGlsZHJlbj86IFRyZWVNb2RlbFtdO1xyXG4gIGxvYWRDaGlsZHJlbj86IENoaWxkcmVuTG9hZGluZ0Z1bmN0aW9uO1xyXG4gIHNldHRpbmdzPzogVHJlZU1vZGVsU2V0dGluZ3M7XHJcbiAgZW1pdExvYWROZXh0TGV2ZWw/OiBib29sZWFuO1xyXG4gIF9zdGF0dXM/OiBUcmVlU3RhdHVzO1xyXG4gIF9mb2xkaW5nVHlwZT86IEZvbGRpbmdUeXBlO1xyXG4gIFthZGRpdGlvbmFsRGF0YTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENzc0NsYXNzZXMge1xyXG4gIC8qIFRoZSBjbGFzcyBvciBjbGFzc2VzIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBleHBhbmRlZCBub2RlICovXHJcbiAgZXhwYW5kZWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qIFRoZSBjbGFzcyBvciBjbGFzc2VzIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBjb2xsYXBzZWQgbm9kZSAqL1xyXG4gIGNvbGxhcHNlZD86IHN0cmluZztcclxuXHJcbiAgLyogVGhlIGNsYXNzIG9yIGNsYXNzZXMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGVtcHR5IG5vZGUgKi9cclxuICBlbXB0eT86IHN0cmluZztcclxuXHJcbiAgLyogVGhlIGNsYXNzIG9yIGNsYXNzZXMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGV4cGFuZGVkIHRvIHRoZSBsZWFmICovXHJcbiAgbGVhZj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZXMge1xyXG4gIC8qIEEgdGVtcGxhdGUgZm9yIGEgbm9kZSAqL1xyXG4gIG5vZGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qIEEgdGVtcGxhdGUgZm9yIGEgbGVhZiBub2RlICovXHJcbiAgbGVhZj86IHN0cmluZztcclxuXHJcbiAgLyogQSB0ZW1wbGF0ZSBmb3IgbGVmdCBtZW51IGh0bWwgZWxlbWVudCAqL1xyXG4gIGxlZnRNZW51Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJlZU1vZGVsU2V0dGluZ3Mge1xyXG4gIC8qIGNzc0NsYXNzZXMgLSBzZXQgY3VzdG9tIGNzcyBjbGFzc2VzIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgYSB0cmVlICovXHJcbiAgcHVibGljIGNzc0NsYXNzZXM/OiBDc3NDbGFzc2VzO1xyXG5cclxuICAvKiBUZW1wbGF0ZXMgLSBzZXQgY3VzdG9tIGh0bWwgdGVtcGxhdGVzIHRvIGJlIHVzZWQgaW4gYSB0cmVlICovXHJcbiAgcHVibGljIHRlbXBsYXRlcz86IFRlbXBsYXRlcztcclxuXHJcbiAgLyoqXHJcbiAgICogXCJsZWZ0TWVudVwiIHByb3BlcnR5IHdoZW4gc2V0IHRvIHRydWUgbWFrZXMgbGVmdCBtZW51IGF2YWlsYWJsZS5cclxuICAgKiBAbmFtZSBUcmVlTW9kZWxTZXR0aW5ncyNsZWZ0TWVudVxyXG4gICAqIEB0eXBlIGJvb2xlYW5cclxuICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBsZWZ0TWVudT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFwicmlnaHRNZW51XCIgcHJvcGVydHkgd2hlbiBzZXQgdG8gdHJ1ZSBtYWtlcyByaWdodCBtZW51IGF2YWlsYWJsZS5cclxuICAgKiBAbmFtZSBUcmVlTW9kZWxTZXR0aW5ncyNyaWdodE1lbnVcclxuICAgKiBAdHlwZSBib29sZWFuXHJcbiAgICogQGRlZmF1bHQgdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyByaWdodE1lbnU/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBcIm1lbnVcIiBwcm9wZXJ0eSB3aGVuIHNldCB3aWxsIGJlIGF2YWlsYWJsZSBhcyBjdXN0b20gY29udGV4dCBtZW51LlxyXG4gICAqIEBuYW1lIFRyZWVNb2RlbFNldHRpbmdzI01lbnVJdGVtc1xyXG4gICAqIEB0eXBlIE5vZGVNZW51SXRlbVxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZW51SXRlbXM/OiBOb2RlTWVudUl0ZW1bXTtcclxuXHJcbiAgLyoqXHJcbiAgICogXCJzdGF0aWNcIiBwcm9wZXJ0eSB3aGVuIHNldCB0byB0cnVlIG1ha2VzIGl0IGltcG9zc2libGUgdG8gZHJhZyduJ2Ryb3AgdHJlZSBvciBjYWxsIGEgbWVudSBvbiBpdC5cclxuICAgKiBAbmFtZSBUcmVlTW9kZWxTZXR0aW5ncyNzdGF0aWNcclxuICAgKiBAdHlwZSBib29sZWFuXHJcbiAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljPzogYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIGlzQ29sbGFwc2VkT25Jbml0PzogYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIGNoZWNrZWQ/OiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgc2VsZWN0aW9uQWxsb3dlZD86IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyBrZWVwTm9kZXNJbkRPTT86IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTk9UX0NBU0NBRElOR19TRVRUSU5HUyA9IFsnc2VsZWN0aW9uQWxsb3dlZCddO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIG1lcmdlKGNoaWxkOiBUcmVlTW9kZWwsIHBhcmVudDogVHJlZU1vZGVsKTogVHJlZU1vZGVsU2V0dGluZ3Mge1xyXG4gICAgY29uc3QgcGFyZW50Q2FzY2FkaW5nU2V0dGluZ3MgPSBvbWl0KGdldChwYXJlbnQsICdzZXR0aW5ncycpLCBUcmVlTW9kZWxTZXR0aW5ncy5OT1RfQ0FTQ0FESU5HX1NFVFRJTkdTKTtcclxuICAgIHJldHVybiBkZWZhdWx0c0RlZXAoe30sIGdldChjaGlsZCwgJ3NldHRpbmdzJyksIHBhcmVudENhc2NhZGluZ1NldHRpbmdzLCB7XHJcbiAgICAgIHN0YXRpYzogZmFsc2UsXHJcbiAgICAgIGxlZnRNZW51OiBmYWxzZSxcclxuICAgICAgcmlnaHRNZW51OiB0cnVlLFxyXG4gICAgICBpc0NvbGxhcHNlZE9uSW5pdDogZmFsc2UsXHJcbiAgICAgIGNoZWNrZWQ6IGZhbHNlLFxyXG4gICAgICBrZWVwTm9kZXNJbkRPTTogZmFsc2UsXHJcbiAgICAgIHNlbGVjdGlvbkFsbG93ZWQ6IHRydWVcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5nMlRyZWVTZXR0aW5ncyB7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHJvb3QgdmlzaWJpbGl0eSBpbiB0aGUgdHJlZS4gV2hlbiB0cnVlIC0gcm9vdCBpcyBpbnZpc2libGUuXHJcbiAgICogQG5hbWUgTmcyVHJlZVNldHRpbmdzI3Jvb3RJc1Zpc2libGVcclxuICAgKiBAdHlwZSBib29sZWFuXHJcbiAgICovXHJcbiAgcm9vdElzVmlzaWJsZT8gPSB0cnVlO1xyXG4gIHNob3dDaGVja2JveGVzPyA9IGZhbHNlO1xyXG4gIGVuYWJsZUNoZWNrYm94ZXM/ID0gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVHJlZVN0YXR1cyB7XHJcbiAgTmV3LFxyXG4gIE1vZGlmaWVkLFxyXG4gIElzQmVpbmdSZW5hbWVkXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVuYW1hYmxlTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogU2V0IG5ldyB2YWx1ZSBvZiB0aGUgcmVuYW1hYmxlIG5vZGUuIEltcGxlbWVudGF0aW9uIG9mIHRoaXMgbWV0aG9kIGlzIHVwIHRvIHVzZXIuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBBIG5ldyB2YWx1ZSBvZiB0aGUgbm9kZS5cclxuICAgKi9cclxuICBzZXROYW1lKG5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG5vZGUuIEltcGxlbWVudGF0aW9uIG9mIHRoaXMgbWV0aG9kIGlzIHVwIHRvIHVzZXIuXHJcbiAgICogQHJldHVybnMge3N0cmluZ30gLSBBIG5vZGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxyXG4gICAqL1xyXG4gIHRvU3RyaW5nKCk6IHN0cmluZztcclxufVxyXG4iXX0=
