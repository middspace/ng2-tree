export function isEmpty(value) {
  if (typeof value === 'string') {
    return !/\S/.test(value);
  }
  if (Array.isArray(value)) {
    return value.length === 0;
  }
  return isNil(value);
}
export function trim(value) {
  return isNil(value) ? '' : value.trim();
}
export function has(value, prop) {
  return value && typeof value === 'object' && Object.prototype.hasOwnProperty.call(value, prop);
}
export function isFunction(value) {
  return typeof value === 'function';
}
export function get(value, path, defaultValue) {
  let result = value;
  for (const prop of path.split('.')) {
    if (!result || !Reflect.has(result, prop)) {
      return defaultValue;
    }
    result = result[prop];
  }
  return isNil(result) || result === value ? defaultValue : result;
}
export function omit(value, propsToSkip) {
  if (!value) {
    return value;
  }
  const normalizedPropsToSkip = typeof propsToSkip === 'string' ? [propsToSkip] : propsToSkip;
  return Object.keys(value).reduce((result, prop) => {
    if (includes(normalizedPropsToSkip, prop)) {
      return result;
    }
    return Object.assign(result, { [prop]: value[prop] });
  }, {});
}
export function size(value) {
  return isEmpty(value) ? 0 : value.length;
}
export function once(fn) {
  let result;
  return (...args) => {
    if (fn) {
      result = fn(...args);
      fn = null;
    }
    return result;
  };
}
export function defaultsDeep(target, ...sources) {
  return [target].concat(sources).reduce((result, source) => {
    if (!source) {
      return result;
    }
    Object.keys(source).forEach(prop => {
      if (isNil(result[prop])) {
        result[prop] = source[prop];
        return;
      }
      if (typeof result[prop] === 'object' && !Array.isArray(result[prop])) {
        result[prop] = defaultsDeep(result[prop], source[prop]);
        return;
      }
    });
    return result;
  }, {});
}
export function includes(target, value) {
  if (isNil(target)) {
    return false;
  }
  const index = typeof target === 'string' ? target.indexOf(value) : target.indexOf(value);
  return index > -1;
}
export function isNil(value) {
  return value === undefined || value === null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm4udXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvZm4udXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLE9BQU8sQ0FBQyxLQUFxQjtJQUMzQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMxQjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QixPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0tBQzNCO0lBRUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUVELE1BQU0sVUFBVSxJQUFJLENBQUMsS0FBYTtJQUNoQyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUMsQ0FBQztBQUVELE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVSxFQUFFLElBQVk7SUFDMUMsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakcsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBVTtJQUNuQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFVLEVBQUUsSUFBWSxFQUFFLFlBQWtCO0lBQzlELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztJQUVuQixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFD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Q0FBQyxNQUFzQixFQUFFLEtBQVU7SUFDekQsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sS0FBSyxHQUFHLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxLQUFVO0lBQzlCLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQy9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogYW55W10gfCBzdHJpbmcpOiBib29sZWFuIHtcclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuICEvXFxTLy50ZXN0KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA9PT0gMDtcclxuICB9XHJcblxyXG4gIHJldHVybiBpc05pbCh2YWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmltKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBpc05pbCh2YWx1ZSkgPyAnJyA6IHZhbHVlLnRyaW0oKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhcyh2YWx1ZTogYW55LCBwcm9wOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHByb3ApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldCh2YWx1ZTogYW55LCBwYXRoOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkge1xyXG4gIGxldCByZXN1bHQgPSB2YWx1ZTtcclxuXHJcbiAgZm9yIChjb25zdCBwcm9wIG9mIHBhdGguc3BsaXQoJy4nKSkge1xyXG4gICAgaWYgKCFyZXN1bHQgfHwgIVJlZmxlY3QuaGFzKHJlc3VsdCwgcHJvcCkpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHQgPSByZXN1bHRbcHJvcF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXNOaWwocmVzdWx0KSB8fCByZXN1bHQgPT09IHZhbHVlID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb21pdCh2YWx1ZTogYW55LCBwcm9wc1RvU2tpcDogc3RyaW5nIHwgc3RyaW5nW10pOiBhbnkge1xyXG4gIGlmICghdmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG5vcm1hbGl6ZWRQcm9wc1RvU2tpcCA9IHR5cGVvZiBwcm9wc1RvU2tpcCA9PT0gJ3N0cmluZycgPyBbcHJvcHNUb1NraXBdIDogcHJvcHNUb1NraXA7XHJcblxyXG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKChyZXN1bHQsIHByb3ApID0+IHtcclxuICAgIGlmIChpbmNsdWRlcyhub3JtYWxpemVkUHJvcHNUb1NraXAsIHByb3ApKSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihyZXN1bHQsIHsgW3Byb3BdOiB2YWx1ZVtwcm9wXSB9KTtcclxuICB9LCB7fSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaXplKHZhbHVlOiBhbnlbXSk6IG51bWJlciB7XHJcbiAgcmV0dXJuIGlzRW1wdHkodmFsdWUpID8gMCA6IHZhbHVlLmxlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uY2UoZm46IE9uY2UpOiBPbmNlIHtcclxuICBsZXQgcmVzdWx0O1xyXG5cclxuICByZXR1cm4gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgICBpZiAoZm4pIHtcclxuICAgICAgcmVzdWx0ID0gZm4oLi4uYXJncyk7XHJcbiAgICAgIGZuID0gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRzRGVlcCh0YXJnZXQ6IGFueSwgLi4uc291cmNlczogYW55W10pOiBhbnkge1xyXG4gIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlcykucmVkdWNlKChyZXN1bHQ6IGFueSwgc291cmNlOiBhbnkpID0+IHtcclxuICAgIGlmICghc291cmNlKSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICBpZiAoaXNOaWwocmVzdWx0W3Byb3BdKSkge1xyXG4gICAgICAgIHJlc3VsdFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0W3Byb3BdID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXN1bHRbcHJvcF0pKSB7XHJcbiAgICAgICAgcmVzdWx0W3Byb3BdID0gZGVmYXVsdHNEZWVwKHJlc3VsdFtwcm9wXSwgc291cmNlW3Byb3BdKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSwge30pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZXModGFyZ2V0OiBzdHJpbmcgfCBhbnlbXSwgdmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gIGlmIChpc05pbCh0YXJnZXQpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBpbmRleCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gdGFyZ2V0LmluZGV4T2YodmFsdWUgYXMgc3RyaW5nKSA6IHRhcmdldC5pbmRleE9mKHZhbHVlKTtcclxuICByZXR1cm4gaW5kZXggPiAtMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTmlsKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgT25jZSA9ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xyXG4iXX0=
