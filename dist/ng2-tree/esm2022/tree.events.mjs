export class NodeEvent {
  node;
  constructor(node) {
    this.node = node;
  }
}
export class NodeSelectedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeUnselectedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeDestructiveEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeMovedEvent extends NodeDestructiveEvent {
  previousParent;
  constructor(node, previousParent) {
    super(node);
    this.previousParent = previousParent;
  }
}
export class NodeRemovedEvent extends NodeDestructiveEvent {
  lastIndex;
  constructor(node, lastIndex) {
    super(node);
    this.lastIndex = lastIndex;
  }
}
export class NodeCreatedEvent extends NodeDestructiveEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeRenamedEvent extends NodeDestructiveEvent {
  oldValue;
  newValue;
  constructor(node, oldValue, newValue) {
    super(node);
    this.oldValue = oldValue;
    this.newValue = newValue;
  }
}
export class NodeExpandedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeCollapsedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class MenuItemSelectedEvent extends NodeEvent {
  selectedItem;
  constructor(node, selectedItem) {
    super(node);
    this.selectedItem = selectedItem;
  }
}
export class LoadNextLevelEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeCheckedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeUncheckedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
export class NodeIndeterminedEvent extends NodeEvent {
  constructor(node) {
    super(node);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdHJlZS5ldmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxPQUFPLFNBQVM7SUFDTTtJQUExQixZQUEwQixJQUFVO1FBQVYsU0FBSSxHQUFKLElBQUksQ0FBTTtJQUFHLENBQUM7Q0FDekM7QUFFRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsU0FBUztJQUM5QyxZQUFtQixJQUFVO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxTQUFTO0lBQ2hELFlBQW1CLElBQVU7UUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFNBQVM7SUFDakQsWUFBbUIsSUFBVTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sY0FBZSxTQUFRLG9CQUFvQjtJQUNoQjtJQUF0QyxZQUFtQixJQUFVLEVBQVMsY0FBb0I7UUFDeEQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRHdCLG1CQUFjLEdBQWQsY0FBYyxDQUFNO0lBRTFELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxvQkFBb0I7SUFDbEI7SUFBdEMsWUFBbUIsSUFBVSxFQUFTLFNBQWlCO1FBQ3JELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUR3QixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBRXZELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxvQkFBb0I7SUFDeEQsWUFBbUIsSUFBVTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsb0JBQW9CO0lBQ2xCO0lBQXlDO0lBQS9FLFlBQW1CLElBQVUsRUFBUyxRQUFnQyxFQUFTLFFBQWdDO1FBQzdHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUR3QixhQUFRLEdBQVIsUUFBUSxDQUF3QjtRQUFTLGFBQVEsR0FBUixRQUFRLENBQXdCO0lBRS9HLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUFTO0lBQzlDLFlBQW1CLElBQVU7UUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFNBQVM7SUFDL0MsWUFBbUIsSUFBVTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsU0FBUztJQUNaO0lBQXRDLFlBQW1CLElBQVUsRUFBUyxZQUFvQjtRQUN4RCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFEd0IsaUJBQVksR0FBWixZQUFZLENBQVE7SUFFMUQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFNBQVM7SUFDL0MsWUFBbUIsSUFBVTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsU0FBUztJQUM3QyxZQUFtQixJQUFVO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxTQUFTO0lBQy9DLFlBQW1CLElBQVU7UUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFNBQVM7SUFDbEQsWUFBbUIsSUFBVTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmVlIH0gZnJvbSAnLi90cmVlJztcclxuaW1wb3J0IHsgUmVuYW1hYmxlTm9kZSB9IGZyb20gJy4vdHJlZS50eXBlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIG5vZGU6IFRyZWUpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOb2RlU2VsZWN0ZWRFdmVudCBleHRlbmRzIE5vZGVFdmVudCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKG5vZGU6IFRyZWUpIHtcclxuICAgIHN1cGVyKG5vZGUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vZGVVbnNlbGVjdGVkRXZlbnQgZXh0ZW5kcyBOb2RlRXZlbnQge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihub2RlOiBUcmVlKSB7XHJcbiAgICBzdXBlcihub2RlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOb2RlRGVzdHJ1Y3RpdmVFdmVudCBleHRlbmRzIE5vZGVFdmVudCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKG5vZGU6IFRyZWUpIHtcclxuICAgIHN1cGVyKG5vZGUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vZGVNb3ZlZEV2ZW50IGV4dGVuZHMgTm9kZURlc3RydWN0aXZlRXZlbnQge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihub2RlOiBUcmVlLCBwdWJsaWMgcHJldmlvdXNQYXJlbnQ6IFRyZWUpIHtcclxuICAgIHN1cGVyKG5vZGUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vZGVSZW1vdmVkRXZlbnQgZXh0ZW5kcyBOb2RlRGVzdHJ1Y3RpdmVFdmVudCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKG5vZGU6IFRyZWUsIHB1YmxpYyBsYXN0SW5kZXg6IG51bWJlcikge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZUNyZWF0ZWRFdmVudCBleHRlbmRzIE5vZGVEZXN0cnVjdGl2ZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSkge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZVJlbmFtZWRFdmVudCBleHRlbmRzIE5vZGVEZXN0cnVjdGl2ZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSwgcHVibGljIG9sZFZhbHVlOiBzdHJpbmcgfCBSZW5hbWFibGVOb2RlLCBwdWJsaWMgbmV3VmFsdWU6IHN0cmluZyB8IFJlbmFtYWJsZU5vZGUpIHtcclxuICAgIHN1cGVyKG5vZGUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vZGVFeHBhbmRlZEV2ZW50IGV4dGVuZHMgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSkge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZUNvbGxhcHNlZEV2ZW50IGV4dGVuZHMgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSkge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVudUl0ZW1TZWxlY3RlZEV2ZW50IGV4dGVuZHMgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSwgcHVibGljIHNlbGVjdGVkSXRlbTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihub2RlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkTmV4dExldmVsRXZlbnQgZXh0ZW5kcyBOb2RlRXZlbnQge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihub2RlOiBUcmVlKSB7XHJcbiAgICBzdXBlcihub2RlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOb2RlQ2hlY2tlZEV2ZW50IGV4dGVuZHMgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSkge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZVVuY2hlY2tlZEV2ZW50IGV4dGVuZHMgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSkge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZUluZGV0ZXJtaW5lZEV2ZW50IGV4dGVuZHMgTm9kZUV2ZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZTogVHJlZSkge1xyXG4gICAgc3VwZXIobm9kZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==
