import {
  LoadNextLevelEvent,
  MenuItemSelectedEvent,
  NodeCheckedEvent,
  NodeCollapsedEvent,
  NodeCreatedEvent,
  NodeExpandedEvent,
  NodeIndeterminedEvent,
  NodeMovedEvent,
  NodeRemovedEvent,
  NodeRenamedEvent,
  NodeSelectedEvent,
  NodeUncheckedEvent,
  NodeUnselectedEvent
} from './tree.events';
import { Inject, Injectable } from '@angular/core';
import { NodeDraggableService } from './draggable/node-draggable.service';
import { isEmpty } from './utils/fn.utils';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from '@angular/core';
import * as i1 from './draggable/node-draggable.service';
export class TreeService {
  nodeDraggableService;
  nodeMoved$ = new Subject();
  nodeRemoved$ = new Subject();
  nodeRenamed$ = new Subject();
  nodeCreated$ = new Subject();
  nodeSelected$ = new Subject();
  nodeUnselected$ = new Subject();
  nodeExpanded$ = new Subject();
  nodeCollapsed$ = new Subject();
  menuItemSelected$ = new Subject();
  loadNextLevel$ = new Subject();
  nodeChecked$ = new Subject();
  nodeUnchecked$ = new Subject();
  nodeIndetermined$ = new Subject();
  controllers = new Map();
  constructor(nodeDraggableService) {
    this.nodeDraggableService = nodeDraggableService;
    this.nodeRemoved$.subscribe(e => e.node.removeItselfFromParent());
  }
  unselectStream(tree) {
    return this.nodeSelected$.pipe(filter(e => tree !== e.node));
  }
  fireNodeRemoved(tree) {
    this.nodeRemoved$.next(new NodeRemovedEvent(tree, tree.positionInParent));
  }
  fireNodeCreated(tree) {
    this.nodeCreated$.next(new NodeCreatedEvent(tree));
  }
  fireNodeSelected(tree) {
    this.nodeSelected$.next(new NodeSelectedEvent(tree));
  }
  fireNodeUnselected(tree) {
    this.nodeUnselected$.next(new NodeUnselectedEvent(tree));
  }
  fireNodeRenamed(oldValue, tree) {
    this.nodeRenamed$.next(new NodeRenamedEvent(tree, oldValue, tree.value));
  }
  fireNodeMoved(tree, parent) {
    this.nodeMoved$.next(new NodeMovedEvent(tree, parent));
  }
  fireMenuItemSelected(tree, selectedItem) {
    this.menuItemSelected$.next(new MenuItemSelectedEvent(tree, selectedItem));
  }
  fireNodeSwitchFoldingType(tree) {
    if (tree.isNodeExpanded()) {
      this.fireNodeExpanded(tree);
      if (this.shouldFireLoadNextLevel(tree)) {
        this.fireLoadNextLevel(tree);
      }
    } else if (tree.isNodeCollapsed()) {
      this.fireNodeCollapsed(tree);
    }
  }
  fireNodeExpanded(tree) {
    this.nodeExpanded$.next(new NodeExpandedEvent(tree));
  }
  fireNodeCollapsed(tree) {
    this.nodeCollapsed$.next(new NodeCollapsedEvent(tree));
  }
  fireLoadNextLevel(tree) {
    this.loadNextLevel$.next(new LoadNextLevelEvent(tree));
  }
  fireNodeChecked(tree) {
    this.nodeChecked$.next(new NodeCheckedEvent(tree));
  }
  fireNodeUnchecked(tree) {
    this.nodeUnchecked$.next(new NodeUncheckedEvent(tree));
  }
  draggedStream(tree, element) {
    return this.nodeDraggableService.draggableNodeEvents$.pipe(
      filter(e => e.target === element),
      filter(e => !e.captured.tree.hasChild(tree))
    );
  }
  setController(id, controller) {
    this.controllers.set(id, controller);
  }
  deleteController(id) {
    if (this.controllers.has(id)) {
      this.controllers.delete(id);
    }
  }
  getController(id) {
    if (this.controllers.has(id)) {
      return this.controllers.get(id);
    }
    return null;
  }
  hasController(id) {
    return this.controllers.has(id);
  }
  shouldFireLoadNextLevel(tree) {
    const shouldLoadNextLevel =
      tree.node.emitLoadNextLevel &&
      !tree.node.loadChildren &&
      !tree.childrenAreBeingLoaded() &&
      isEmpty(tree.children);
    if (shouldLoadNextLevel) {
      tree.loadingChildrenRequested();
    }
    return shouldLoadNextLevel;
  }
  fireNodeIndetermined(tree) {
    this.nodeIndetermined$.next(new NodeIndeterminedEvent(tree));
  }
  static ɵfac = i0.ɵɵngDeclareFactory({
    minVersion: '12.0.0',
    version: '16.2.12',
    ngImport: i0,
    type: TreeService,
    deps: [{ token: NodeDraggableService }],
    target: i0.ɵɵFactoryTarget.Injectable
  });
  static ɵprov = i0.ɵɵngDeclareInjectable({
    minVersion: '12.0.0',
    version: '16.2.12',
    ngImport: i0,
    type: TreeService
  });
}
i0.ɵɵngDeclareClassMetadata({
  minVersion: '12.0.0',
  version: '16.2.12',
  ngImport: i0,
  type: TreeService,
  decorators: [
    {
      type: Injectable
    }
  ],
  ctorParameters: function() {
    return [
      {
        type: i1.NodeDraggableService,
        decorators: [
          {
            type: Inject,
            args: [NodeDraggableService]
          }
        ]
      }
    ];
  }
});
//# sourceMappingURL=data:application/json;base64,
