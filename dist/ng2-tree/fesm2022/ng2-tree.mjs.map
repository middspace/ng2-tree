{"version":3,"file":"ng2-tree.mjs","sources":["../../../src/tree.events.ts","../../../src/draggable/draggable.events.ts","../../../src/draggable/node-draggable.service.ts","../../../src/utils/fn.utils.ts","../../../src/tree.service.ts","../../../src/rxjs-imports.ts","../../../src/tree.types.ts","../../../src/tree.ts","../../../src/menu/menu.events.ts","../../../src/utils/event.utils.ts","../../../src/tree-controller.ts","../../../src/editable/editable.events.ts","../../../src/menu/node-menu.service.ts","../../../src/draggable/captured-node.ts","../../../src/draggable/node-draggable.directive.ts","../../../src/editable/node-editable.directive.ts","../../../src/menu/node-menu.component.ts","../../../src/utils/safe-html.pipe.ts","../../../src/tree-internal.component.ts","../../../src/tree.component.ts","../../../src/tree.module.ts","../../../src/ng2-tree.ts"],"sourcesContent":["import { Tree } from './tree';\r\nimport { RenamableNode } from './tree.types';\r\n\r\nexport class NodeEvent {\r\n  public constructor(public node: Tree) {}\r\n}\r\n\r\nexport class NodeSelectedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeUnselectedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeDestructiveEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeMovedEvent extends NodeDestructiveEvent {\r\n  public constructor(node: Tree, public previousParent: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeRemovedEvent extends NodeDestructiveEvent {\r\n  public constructor(node: Tree, public lastIndex: number) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeCreatedEvent extends NodeDestructiveEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeRenamedEvent extends NodeDestructiveEvent {\r\n  public constructor(node: Tree, public oldValue: string | RenamableNode, public newValue: string | RenamableNode) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeExpandedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeCollapsedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class MenuItemSelectedEvent extends NodeEvent {\r\n  public constructor(node: Tree, public selectedItem: string) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class LoadNextLevelEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeCheckedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeUncheckedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n\r\nexport class NodeIndeterminedEvent extends NodeEvent {\r\n  public constructor(node: Tree) {\r\n    super(node);\r\n  }\r\n}\r\n","import { ElementRef } from '@angular/core';\r\nimport { CapturedNode } from './captured-node';\r\n\r\nexport class NodeDraggableEvent {\r\n  public constructor(public captured: CapturedNode, public target: ElementRef) {}\r\n}\r\n","import { ElementRef, Injectable } from '@angular/core';\r\nimport { CapturedNode } from './captured-node';\r\nimport { NodeDraggableEvent } from './draggable.events';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NodeDraggableService {\r\n  public draggableNodeEvents$: Subject<NodeDraggableEvent> = new Subject<NodeDraggableEvent>();\r\n\r\n  private capturedNode: CapturedNode;\r\n\r\n  public fireNodeDragged(captured: CapturedNode, target: ElementRef): void {\r\n    if (!captured.tree || captured.tree.isStatic()) {\r\n      return;\r\n    }\r\n\r\n    this.draggableNodeEvents$.next(new NodeDraggableEvent(captured, target));\r\n  }\r\n\r\n  public captureNode(node: CapturedNode): void {\r\n    this.capturedNode = node;\r\n  }\r\n\r\n  public getCapturedNode(): CapturedNode {\r\n    return this.capturedNode;\r\n  }\r\n\r\n  public releaseCapturedNode(): void {\r\n    this.capturedNode = null;\r\n  }\r\n}\r\n","export function isEmpty(value: any[] | string): boolean {\r\n  if (typeof value === 'string') {\r\n    return !/\\S/.test(value);\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.length === 0;\r\n  }\r\n\r\n  return isNil(value);\r\n}\r\n\r\nexport function trim(value: string): string {\r\n  return isNil(value) ? '' : value.trim();\r\n}\r\n\r\nexport function has(value: any, prop: string): boolean {\r\n  return value && typeof value === 'object' && Object.prototype.hasOwnProperty.call(value, prop);\r\n}\r\n\r\nexport function isFunction(value: any) {\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function get(value: any, path: string, defaultValue?: any) {\r\n  let result = value;\r\n\r\n  for (const prop of path.split('.')) {\r\n    if (!result || !Reflect.has(result, prop)) {\r\n      return defaultValue;\r\n    }\r\n\r\n    result = result[prop];\r\n  }\r\n\r\n  return isNil(result) || result === value ? defaultValue : result;\r\n}\r\n\r\nexport function omit(value: any, propsToSkip: string | string[]): any {\r\n  if (!value) {\r\n    return value;\r\n  }\r\n\r\n  const normalizedPropsToSkip = typeof propsToSkip === 'string' ? [propsToSkip] : propsToSkip;\r\n\r\n  return Object.keys(value).reduce((result, prop) => {\r\n    if (includes(normalizedPropsToSkip, prop)) {\r\n      return result;\r\n    }\r\n    return Object.assign(result, { [prop]: value[prop] });\r\n  }, {});\r\n}\r\n\r\nexport function size(value: any[]): number {\r\n  return isEmpty(value) ? 0 : value.length;\r\n}\r\n\r\nexport function once(fn: Once): Once {\r\n  let result;\r\n\r\n  return (...args: any[]) => {\r\n    if (fn) {\r\n      result = fn(...args);\r\n      fn = null;\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\nexport function defaultsDeep(target: any, ...sources: any[]): any {\r\n  return [target].concat(sources).reduce((result: any, source: any) => {\r\n    if (!source) {\r\n      return result;\r\n    }\r\n\r\n    Object.keys(source).forEach(prop => {\r\n      if (isNil(result[prop])) {\r\n        result[prop] = source[prop];\r\n        return;\r\n      }\r\n\r\n      if (typeof result[prop] === 'object' && !Array.isArray(result[prop])) {\r\n        result[prop] = defaultsDeep(result[prop], source[prop]);\r\n        return;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }, {});\r\n}\r\n\r\nexport function includes(target: string | any[], value: any): boolean {\r\n  if (isNil(target)) {\r\n    return false;\r\n  }\r\n\r\n  const index = typeof target === 'string' ? target.indexOf(value as string) : target.indexOf(value);\r\n  return index > -1;\r\n}\r\n\r\nexport function isNil(value: any): boolean {\r\n  return value === undefined || value === null;\r\n}\r\n\r\nexport type Once = (...args: any[]) => any;\r\n","import {\r\n  LoadNextLevelEvent,\r\n  MenuItemSelectedEvent,\r\n  NodeCheckedEvent,\r\n  NodeCollapsedEvent,\r\n  NodeCreatedEvent,\r\n  NodeExpandedEvent,\r\n  NodeIndeterminedEvent,\r\n  NodeMovedEvent,\r\n  NodeRemovedEvent,\r\n  NodeRenamedEvent,\r\n  NodeSelectedEvent,\r\n  NodeUncheckedEvent,\r\n  NodeUnselectedEvent\r\n} from './tree.events';\r\nimport { RenamableNode } from './tree.types';\r\nimport { Tree } from './tree';\r\nimport { TreeController } from './tree-controller';\r\nimport { ElementRef, Inject, Injectable } from '@angular/core';\r\nimport { NodeDraggableService } from './draggable/node-draggable.service';\r\nimport { NodeDraggableEvent } from './draggable/draggable.events';\r\nimport { isEmpty } from './utils/fn.utils';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class TreeService {\r\n  public nodeMoved$: Subject<NodeMovedEvent> = new Subject<NodeMovedEvent>();\r\n  public nodeRemoved$: Subject<NodeRemovedEvent> = new Subject<NodeRemovedEvent>();\r\n  public nodeRenamed$: Subject<NodeRenamedEvent> = new Subject<NodeRenamedEvent>();\r\n  public nodeCreated$: Subject<NodeCreatedEvent> = new Subject<NodeCreatedEvent>();\r\n  public nodeSelected$: Subject<NodeSelectedEvent> = new Subject<NodeSelectedEvent>();\r\n  public nodeUnselected$: Subject<NodeUnselectedEvent> = new Subject<NodeUnselectedEvent>();\r\n  public nodeExpanded$: Subject<NodeExpandedEvent> = new Subject<NodeExpandedEvent>();\r\n  public nodeCollapsed$: Subject<NodeCollapsedEvent> = new Subject<NodeCollapsedEvent>();\r\n  public menuItemSelected$: Subject<MenuItemSelectedEvent> = new Subject<MenuItemSelectedEvent>();\r\n  public loadNextLevel$: Subject<LoadNextLevelEvent> = new Subject<LoadNextLevelEvent>();\r\n  public nodeChecked$: Subject<NodeCheckedEvent> = new Subject<NodeCheckedEvent>();\r\n  public nodeUnchecked$: Subject<NodeUncheckedEvent> = new Subject<NodeUncheckedEvent>();\r\n  public nodeIndetermined$: Subject<NodeIndeterminedEvent> = new Subject<NodeIndeterminedEvent>();\r\n\r\n  private controllers: Map<string | number, TreeController> = new Map();\r\n\r\n  public constructor(@Inject(NodeDraggableService) private nodeDraggableService: NodeDraggableService) {\r\n    this.nodeRemoved$.subscribe((e: NodeRemovedEvent) => e.node.removeItselfFromParent());\r\n  }\r\n\r\n  public unselectStream(tree: Tree): Observable<NodeSelectedEvent> {\r\n    return this.nodeSelected$.pipe(filter((e: NodeSelectedEvent) => tree !== e.node));\r\n  }\r\n\r\n  public fireNodeRemoved(tree: Tree): void {\r\n    this.nodeRemoved$.next(new NodeRemovedEvent(tree, tree.positionInParent));\r\n  }\r\n\r\n  public fireNodeCreated(tree: Tree): void {\r\n    this.nodeCreated$.next(new NodeCreatedEvent(tree));\r\n  }\r\n\r\n  public fireNodeSelected(tree: Tree): void {\r\n    this.nodeSelected$.next(new NodeSelectedEvent(tree));\r\n  }\r\n\r\n  public fireNodeUnselected(tree: Tree): void {\r\n    this.nodeUnselected$.next(new NodeUnselectedEvent(tree));\r\n  }\r\n\r\n  public fireNodeRenamed(oldValue: RenamableNode | string, tree: Tree): void {\r\n    this.nodeRenamed$.next(new NodeRenamedEvent(tree, oldValue, tree.value));\r\n  }\r\n\r\n  public fireNodeMoved(tree: Tree, parent: Tree): void {\r\n    this.nodeMoved$.next(new NodeMovedEvent(tree, parent));\r\n  }\r\n\r\n  public fireMenuItemSelected(tree: Tree, selectedItem: string): void {\r\n    this.menuItemSelected$.next(new MenuItemSelectedEvent(tree, selectedItem));\r\n  }\r\n\r\n  public fireNodeSwitchFoldingType(tree: Tree): void {\r\n    if (tree.isNodeExpanded()) {\r\n      this.fireNodeExpanded(tree);\r\n      if (this.shouldFireLoadNextLevel(tree)) {\r\n        this.fireLoadNextLevel(tree);\r\n      }\r\n    } else if (tree.isNodeCollapsed()) {\r\n      this.fireNodeCollapsed(tree);\r\n    }\r\n  }\r\n\r\n  private fireNodeExpanded(tree: Tree): void {\r\n    this.nodeExpanded$.next(new NodeExpandedEvent(tree));\r\n  }\r\n\r\n  private fireNodeCollapsed(tree: Tree): void {\r\n    this.nodeCollapsed$.next(new NodeCollapsedEvent(tree));\r\n  }\r\n\r\n  private fireLoadNextLevel(tree: Tree): void {\r\n    this.loadNextLevel$.next(new LoadNextLevelEvent(tree));\r\n  }\r\n\r\n  public fireNodeChecked(tree: Tree): void {\r\n    this.nodeChecked$.next(new NodeCheckedEvent(tree));\r\n  }\r\n\r\n  public fireNodeUnchecked(tree: Tree): void {\r\n    this.nodeUnchecked$.next(new NodeUncheckedEvent(tree));\r\n  }\r\n\r\n  public draggedStream(tree: Tree, element: ElementRef): Observable<NodeDraggableEvent> {\r\n    return this.nodeDraggableService.draggableNodeEvents$.pipe(\r\n      filter((e: NodeDraggableEvent) => e.target === element),\r\n      filter((e: NodeDraggableEvent) => !e.captured.tree.hasChild(tree))\r\n    );\r\n  }\r\n\r\n  public setController(id: string | number, controller: TreeController): void {\r\n    this.controllers.set(id, controller);\r\n  }\r\n\r\n  public deleteController(id: string | number): void {\r\n    if (this.controllers.has(id)) {\r\n      this.controllers.delete(id);\r\n    }\r\n  }\r\n\r\n  public getController(id: string | number): TreeController {\r\n    if (this.controllers.has(id)) {\r\n      return this.controllers.get(id);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public hasController(id: string | number): boolean {\r\n    return this.controllers.has(id);\r\n  }\r\n\r\n  private shouldFireLoadNextLevel(tree: Tree): boolean {\r\n    const shouldLoadNextLevel =\r\n      tree.node.emitLoadNextLevel &&\r\n      !tree.node.loadChildren &&\r\n      !tree.childrenAreBeingLoaded() &&\r\n      isEmpty(tree.children);\r\n\r\n    if (shouldLoadNextLevel) {\r\n      tree.loadingChildrenRequested();\r\n    }\r\n\r\n    return shouldLoadNextLevel;\r\n  }\r\n\r\n  public fireNodeIndetermined(tree: Tree): void {\r\n    this.nodeIndetermined$.next(new NodeIndeterminedEvent(tree));\r\n  }\r\n}\r\n","import { filter, merge } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\n// This forces angular compiler to generate a \"rxjs-imports.metadata.json\"\r\n// with a valid metadata instead of \"[null]\"\r\nexport const noop = () => {};\r\n","import { defaultsDeep, get, omit } from './utils/fn.utils';\r\nimport { NodeMenuItem } from './menu/node-menu.component';\r\n\r\nexport class FoldingType {\r\n  public static Expanded: FoldingType = new FoldingType('node-expanded');\r\n  public static Collapsed: FoldingType = new FoldingType('node-collapsed');\r\n  public static Empty: FoldingType = new FoldingType('node-empty');\r\n  public static Leaf: FoldingType = new FoldingType('node-leaf');\r\n\r\n  public constructor(private _cssClass: string) {}\r\n\r\n  public get cssClass(): string {\r\n    return this._cssClass;\r\n  }\r\n}\r\n\r\nexport type ChildrenLoadingFunction = (callback: (children: TreeModel[]) => void) => void;\r\n\r\nexport interface TreeModel {\r\n  value: string | RenamableNode;\r\n  id?: string | number;\r\n  children?: TreeModel[];\r\n  loadChildren?: ChildrenLoadingFunction;\r\n  settings?: TreeModelSettings;\r\n  emitLoadNextLevel?: boolean;\r\n  _status?: TreeStatus;\r\n  _foldingType?: FoldingType;\r\n  [additionalData: string]: any;\r\n}\r\n\r\nexport interface CssClasses {\r\n  /* The class or classes that should be added to the expanded node */\r\n  expanded?: string;\r\n\r\n  /* The class or classes that should be added to the collapsed node */\r\n  collapsed?: string;\r\n\r\n  /* The class or classes that should be added to the empty node */\r\n  empty?: string;\r\n\r\n  /* The class or classes that should be added to the expanded to the leaf */\r\n  leaf?: string;\r\n}\r\n\r\nexport interface Templates {\r\n  /* A template for a node */\r\n  node?: string;\r\n\r\n  /* A template for a leaf node */\r\n  leaf?: string;\r\n\r\n  /* A template for left menu html element */\r\n  leftMenu?: string;\r\n}\r\n\r\nexport class TreeModelSettings {\r\n  /* cssClasses - set custom css classes which will be used for a tree */\r\n  public cssClasses?: CssClasses;\r\n\r\n  /* Templates - set custom html templates to be used in a tree */\r\n  public templates?: Templates;\r\n\r\n  /**\r\n   * \"leftMenu\" property when set to true makes left menu available.\r\n   * @name TreeModelSettings#leftMenu\r\n   * @type boolean\r\n   * @default false\r\n   */\r\n  public leftMenu?: boolean;\r\n\r\n  /**\r\n   * \"rightMenu\" property when set to true makes right menu available.\r\n   * @name TreeModelSettings#rightMenu\r\n   * @type boolean\r\n   * @default true\r\n   */\r\n  public rightMenu?: boolean;\r\n\r\n  /**\r\n   * \"menu\" property when set will be available as custom context menu.\r\n   * @name TreeModelSettings#MenuItems\r\n   * @type NodeMenuItem\r\n   */\r\n  public menuItems?: NodeMenuItem[];\r\n\r\n  /**\r\n   * \"static\" property when set to true makes it impossible to drag'n'drop tree or call a menu on it.\r\n   * @name TreeModelSettings#static\r\n   * @type boolean\r\n   * @default false\r\n   */\r\n  public static?: boolean;\r\n\r\n  public isCollapsedOnInit?: boolean;\r\n\r\n  public checked?: boolean;\r\n\r\n  public selectionAllowed?: boolean;\r\n\r\n  public keepNodesInDOM?: boolean;\r\n\r\n  public static readonly NOT_CASCADING_SETTINGS = ['selectionAllowed'];\r\n\r\n  public static merge(child: TreeModel, parent: TreeModel): TreeModelSettings {\r\n    const parentCascadingSettings = omit(get(parent, 'settings'), TreeModelSettings.NOT_CASCADING_SETTINGS);\r\n    return defaultsDeep({}, get(child, 'settings'), parentCascadingSettings, {\r\n      static: false,\r\n      leftMenu: false,\r\n      rightMenu: true,\r\n      isCollapsedOnInit: false,\r\n      checked: false,\r\n      keepNodesInDOM: false,\r\n      selectionAllowed: true\r\n    });\r\n  }\r\n}\r\n\r\nexport class Ng2TreeSettings {\r\n  /**\r\n   * Indicates root visibility in the tree. When true - root is invisible.\r\n   * @name Ng2TreeSettings#rootIsVisible\r\n   * @type boolean\r\n   */\r\n  rootIsVisible? = true;\r\n  showCheckboxes? = false;\r\n  enableCheckboxes? = true;\r\n}\r\n\r\nexport enum TreeStatus {\r\n  New,\r\n  Modified,\r\n  IsBeingRenamed\r\n}\r\n\r\nexport interface RenamableNode {\r\n  /**\r\n   * Set new value of the renamable node. Implementation of this method is up to user.\r\n   * @param {string} name - A new value of the node.\r\n   */\r\n  setName(name: string): void;\r\n\r\n  /**\r\n   * Get string representation of the node. Implementation of this method is up to user.\r\n   * @returns {string} - A node string representation.\r\n   */\r\n  toString(): string;\r\n}\r\n","import { defaultsDeep, get, has, includes, isEmpty, isFunction, isNil, omit, once, size, trim } from './utils/fn.utils';\r\n\r\nimport {\r\n  ChildrenLoadingFunction,\r\n  FoldingType,\r\n  RenamableNode,\r\n  TreeModel,\r\n  TreeModelSettings,\r\n  TreeStatus\r\n} from './tree.types';\r\nimport { NodeMenuItem } from './menu/node-menu.component';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Observable, Observer, of } from 'rxjs';\r\n\r\nenum ChildrenLoadingState {\r\n  NotStarted,\r\n  Loading,\r\n  Completed\r\n}\r\n\r\nexport class Tree {\r\n  private _children: Tree[];\r\n  private _loadChildren: ChildrenLoadingFunction;\r\n  private _childrenLoadingState: ChildrenLoadingState = ChildrenLoadingState.NotStarted;\r\n  private _childrenAsyncOnce: () => Observable<Tree[]> = once(() => {\r\n    return new Observable((observer: Observer<Tree[]>) => {\r\n      setTimeout(() => {\r\n        this._childrenLoadingState = ChildrenLoadingState.Loading;\r\n        this._loadChildren((children: TreeModel[]) => {\r\n          this._children = (children || []).map((child: TreeModel) => new Tree(child, this));\r\n          this._childrenLoadingState = ChildrenLoadingState.Completed;\r\n          observer.next(this.children);\r\n          observer.complete();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  public node: TreeModel;\r\n  public parent: Tree;\r\n\r\n  // STATIC METHODS ----------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Check that value passed is not empty (it doesn't consist of only whitespace symbols).\r\n   * @param {string} value - A value that should be checked.\r\n   * @returns {boolean} - A flag indicating that value is empty or not.\r\n   * @static\r\n   */\r\n  public static isValueEmpty(value: string): boolean {\r\n    return isEmpty(trim(value));\r\n  }\r\n\r\n  /**\r\n   * Check whether a given value can be considered RenamableNode.\r\n   * @param {any} value - A value to check.\r\n   * @returns {boolean} - A flag indicating whether given value is Renamable node or not.\r\n   * @static\r\n   */\r\n  public static isRenamable(value: any): value is RenamableNode {\r\n    return (\r\n      has(value, 'setName') &&\r\n      isFunction(value.setName) &&\r\n      (has(value, 'toString') && isFunction(value.toString) && value.toString !== Object.toString)\r\n    );\r\n  }\r\n\r\n  private static cloneTreeShallow(origin: Tree): Tree {\r\n    const tree = new Tree(Object.assign({}, origin.node));\r\n    tree._children = origin._children;\r\n    return tree;\r\n  }\r\n\r\n  private static applyNewValueToRenamable(value: RenamableNode, newValue: string): RenamableNode {\r\n    const renamableValue: RenamableNode = Object.assign({}, value as RenamableNode);\r\n    renamableValue.setName(newValue);\r\n    return renamableValue;\r\n  }\r\n\r\n  /**\r\n   * Build an instance of Tree from an object implementing TreeModel interface.\r\n   * @param {TreeModel} model - A model that is used to build a tree.\r\n   * @param {Tree} [parent] - An optional parent if you want to build a tree from the model that should be a child of an existing Tree instance.\r\n   * @param {boolean} [isBranch] - An option that makes a branch from created tree. Branch can have children.\r\n   */\r\n  public constructor(node: TreeModel, parent: Tree = null, isBranch: boolean = false) {\r\n    this.buildTreeFromModel(node, parent, isBranch || Array.isArray(node.children));\r\n  }\r\n\r\n  private buildTreeFromModel(model: TreeModel, parent: Tree, isBranch: boolean): void {\r\n    this.parent = parent;\r\n    this.node = Object.assign(\r\n      omit(model, 'children') as TreeModel,\r\n      { settings: TreeModelSettings.merge(model, get(parent, 'node')) },\r\n      { emitLoadNextLevel: model.emitLoadNextLevel === true }\r\n    ) as TreeModel;\r\n\r\n    if (isFunction(this.node.loadChildren)) {\r\n      this._loadChildren = this.node.loadChildren;\r\n    } else {\r\n      get(model, 'children', []).forEach((child: TreeModel, index: number) => {\r\n        this._addChild(new Tree(child, this), index);\r\n      });\r\n    }\r\n\r\n    if (!Array.isArray(this._children)) {\r\n      this._children = this.node.loadChildren || isBranch ? [] : null;\r\n    }\r\n  }\r\n\r\n  public hasDeferredChildren(): boolean {\r\n    return typeof this._loadChildren === 'function';\r\n  }\r\n  /* Setting the children loading state to Loading since a request was dispatched to the client */\r\n  public loadingChildrenRequested(): void {\r\n    this._childrenLoadingState = ChildrenLoadingState.Loading;\r\n  }\r\n\r\n  /**\r\n   * Check whether children of the node are being loaded.\r\n   * Makes sense only for nodes that define `loadChildren` function.\r\n   * @returns {boolean} A flag indicating that children are being loaded.\r\n   */\r\n  public childrenAreBeingLoaded(): boolean {\r\n    return this._childrenLoadingState === ChildrenLoadingState.Loading;\r\n  }\r\n\r\n  /**\r\n   * Check whether children of the node were loaded.\r\n   * Makes sense only for nodes that define `loadChildren` function.\r\n   * @returns {boolean} A flag indicating that children were loaded.\r\n   */\r\n  public childrenWereLoaded(): boolean {\r\n    return this._childrenLoadingState === ChildrenLoadingState.Completed;\r\n  }\r\n\r\n  private canLoadChildren(): boolean {\r\n    return (\r\n      this._childrenLoadingState === ChildrenLoadingState.NotStarted &&\r\n      this.foldingType === FoldingType.Expanded &&\r\n      !!this._loadChildren\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check whether children of the node should be loaded and not loaded yet.\r\n   * Makes sense only for nodes that define `loadChildren` function.\r\n   * @returns {boolean} A flag indicating that children should be loaded for the current node.\r\n   */\r\n  public childrenShouldBeLoaded(): boolean {\r\n    return !this.childrenWereLoaded() && (!!this._loadChildren || this.node.emitLoadNextLevel === true);\r\n  }\r\n\r\n  /**\r\n   * Get children of the current tree.\r\n   * @returns {Tree[]} The children of the current tree.\r\n   */\r\n  public get children(): Tree[] {\r\n    return this._children;\r\n  }\r\n\r\n  /**\r\n   * By getting value from this property you start process of loading node's children using `loadChildren` function.\r\n   * Once children are loaded `loadChildren` function won't be called anymore and loaded for the first time children are emitted in case of subsequent calls.\r\n   * @returns {Observable<Tree[]>} An observable which emits children once they are loaded.\r\n   */\r\n  public get childrenAsync(): Observable<Tree[]> {\r\n    if (this.canLoadChildren()) {\r\n      return this._childrenAsyncOnce();\r\n    }\r\n    return of(this.children);\r\n  }\r\n\r\n  /**\r\n   * By calling this method you start process of loading node's children using `loadChildren` function.\r\n   */\r\n  public reloadChildren(): void {\r\n    if (this.childrenShouldBeLoaded()) {\r\n      this._childrenLoadingState = ChildrenLoadingState.Loading;\r\n      this._loadChildren((children: TreeModel[]) => {\r\n        this._children = children && children.map((child: TreeModel) => new Tree(child, this));\r\n        this._childrenLoadingState = ChildrenLoadingState.Completed;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * By calling this method you will remove all current children of a treee and create new.\r\n   */\r\n  public setChildren(children: Array<TreeModel>): void {\r\n    this._children = children && children.map((child: TreeModel) => new Tree(child, this));\r\n    if (this.childrenShouldBeLoaded()) {\r\n      this._childrenLoadingState = ChildrenLoadingState.Completed;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new node in the current tree.\r\n   * @param {boolean} isBranch - A flag that indicates whether a new node should be a \"Branch\". \"Leaf\" node will be created by default\r\n   * @param {TreeModel} model - Tree model of the new node which will be inserted. Empty node will be created by default and it will fire edit mode of this node\r\n   * @returns {Tree} A newly created child node.\r\n   */\r\n  public createNode(isBranch: boolean, model: TreeModel = { value: '' }): Tree {\r\n    const tree = new Tree(model, this, isBranch);\r\n    if (!model.id) {\r\n      tree.markAsNew();\r\n    }\r\n\r\n    tree.id = tree.id || uuidv4();\r\n\r\n    if (this.childrenShouldBeLoaded() && !(this.childrenAreBeingLoaded() || this.childrenWereLoaded())) {\r\n      return null;\r\n    }\r\n    if (this.isLeaf()) {\r\n      return this.addSibling(tree);\r\n    } else {\r\n      return this.addChild(tree);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the value of the current node\r\n   * @returns {(string|RenamableNode)} The value of the node.\r\n   */\r\n  public get value(): any {\r\n    return this.node.value;\r\n  }\r\n\r\n  public set checked(checked: boolean) {\r\n    this.node.settings = Object.assign({}, this.node.settings, { checked });\r\n  }\r\n\r\n  public get checked(): boolean {\r\n    return !!get(this.node.settings, 'checked');\r\n  }\r\n\r\n  public get checkedChildren(): Tree[] {\r\n    return this.hasLoadedChildern() ? this.children.filter(child => child.checked) : [];\r\n  }\r\n\r\n  public set selectionAllowed(selectionAllowed: boolean) {\r\n    this.node.settings = Object.assign({}, this.node.settings, { selectionAllowed });\r\n  }\r\n\r\n  public get selectionAllowed(): boolean {\r\n    const value = get(this.node.settings, 'selectionAllowed');\r\n    return isNil(value) ? true : !!value;\r\n  }\r\n\r\n  hasLoadedChildern() {\r\n    return !isEmpty(this.children);\r\n  }\r\n\r\n  loadedChildrenAmount() {\r\n    return size(this.children);\r\n  }\r\n\r\n  checkedChildrenAmount() {\r\n    return size(this.checkedChildren);\r\n  }\r\n\r\n  /**\r\n   * Set the value of the current node\r\n   * @param {(string|RenamableNode)} value - The new value of the node.\r\n   */\r\n  public set value(value: any) {\r\n    if (typeof value !== 'string' && !Tree.isRenamable(value)) {\r\n      return;\r\n    }\r\n\r\n    const stringifiedValue = '' + value;\r\n    if (Tree.isRenamable(this.value)) {\r\n      this.node.value = Tree.applyNewValueToRenamable(this.value as RenamableNode, stringifiedValue);\r\n    } else {\r\n      this.node.value = Tree.isValueEmpty(stringifiedValue) ? this.node.value : stringifiedValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a sibling node for the current node. This won't work if the current node is a root.\r\n   * @param {Tree} sibling - A node that should become a sibling.\r\n   * @param [number] position - Position in which sibling will be inserted. By default it will be inserted at the last position in a parent.\r\n   * @returns {Tree} A newly inserted sibling, or null if you are trying to make a sibling for the root.\r\n   */\r\n  public addSibling(sibling: Tree, position?: number): Tree {\r\n    if (Array.isArray(get(this.parent, 'children'))) {\r\n      return this.parent.addChild(sibling, position);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Add a child node for the current node.\r\n   * @param {Tree} child - A node that should become a child.\r\n   * @param [number] position - Position in which child will be inserted. By default it will be inserted at the last position in a parent.\r\n   * @returns {Tree} A newly inserted child.\r\n   */\r\n  public addChild(child: Tree, position?: number): Tree {\r\n    const newborn = this._addChild(Tree.cloneTreeShallow(child), position);\r\n\r\n    this._setFoldingType();\r\n    if (this.isNodeCollapsed()) {\r\n      this.switchFoldingType();\r\n    }\r\n\r\n    return newborn;\r\n  }\r\n\r\n  private _addChild(child: Tree, position: number = size(this._children) || 0): Tree {\r\n    child.parent = this;\r\n\r\n    if (Array.isArray(this._children)) {\r\n      this._children.splice(position, 0, child);\r\n    } else {\r\n      this._children = [child];\r\n    }\r\n\r\n    return child;\r\n  }\r\n\r\n  /**\r\n   * Swap position of the current node with the given sibling. If node passed as a parameter is not a sibling - nothing happens.\r\n   * @param {Tree} sibling - A sibling with which current node shold be swapped.\r\n   */\r\n  public swapWithSibling(sibling: Tree): void {\r\n    if (!this.hasSibling(sibling)) {\r\n      return;\r\n    }\r\n\r\n    const siblingIndex = sibling.positionInParent;\r\n    const thisTreeIndex = this.positionInParent;\r\n\r\n    this.parent._children[siblingIndex] = this;\r\n    this.parent._children[thisTreeIndex] = sibling;\r\n  }\r\n\r\n  /**\r\n   * Get a node's position in its parent.\r\n   * @returns {number} The position inside a parent.\r\n   */\r\n  public get positionInParent(): number {\r\n    if (this.isRoot()) {\r\n      return -1;\r\n    }\r\n\r\n    return this.parent.children ? this.parent.children.indexOf(this) : -1;\r\n  }\r\n\r\n  /**\r\n   * Check whether or not this tree is static.\r\n   * @returns {boolean} A flag indicating whether or not this tree is static.\r\n   */\r\n  public isStatic(): boolean {\r\n    return get(this.node.settings, 'static', false);\r\n  }\r\n\r\n  /**\r\n   * Check whether or not this tree has a left menu.\r\n   * @returns {boolean} A flag indicating whether or not this tree has a left menu.\r\n   */\r\n  public hasLeftMenu(): boolean {\r\n    return !get(this.node.settings, 'static', false) && get(this.node.settings, 'leftMenu', false);\r\n  }\r\n\r\n  /**\r\n   * Check whether or not this tree has a right menu.\r\n   * @returns {boolean} A flag indicating whether or not this tree has a right menu.\r\n   */\r\n  public hasRightMenu(): boolean {\r\n    return !get(this.node.settings, 'static', false) && get(this.node.settings, 'rightMenu', false);\r\n  }\r\n\r\n  /**\r\n   * Check whether this tree is \"Leaf\" or not.\r\n   * @returns {boolean} A flag indicating whether or not this tree is a \"Leaf\".\r\n   */\r\n  public isLeaf(): boolean {\r\n    return !this.isBranch();\r\n  }\r\n\r\n  /**\r\n   * Get menu items of the current tree.\r\n   * @returns {NodeMenuItem[]} The menu items of the current tree.\r\n   */\r\n  public get menuItems(): NodeMenuItem[] {\r\n    return get(this.node.settings, 'menuItems');\r\n  }\r\n\r\n  /**\r\n   * Check whether or not this tree has a custom menu.\r\n   * @returns {boolean} A flag indicating whether or not this tree has a custom menu.\r\n   */\r\n  public hasCustomMenu(): boolean {\r\n    return !this.isStatic() && !!get(this.node.settings, 'menuItems', false);\r\n  }\r\n  /**\r\n   * Check whether this tree is \"Branch\" or not. \"Branch\" is a node that has children.\r\n   * @returns {boolean} A flag indicating whether or not this tree is a \"Branch\".\r\n   */\r\n  public isBranch(): boolean {\r\n    return this.node.emitLoadNextLevel === true || Array.isArray(this._children);\r\n  }\r\n\r\n  /**\r\n   * Check whether this tree has children.\r\n   * @returns {boolean} A flag indicating whether or not this tree has children.\r\n   */\r\n  public hasChildren(): boolean {\r\n    return !isEmpty(this._children) || this.childrenShouldBeLoaded();\r\n  }\r\n\r\n  /**\r\n   * Check whether this tree is a root or not. The root is the tree (node) that doesn't have parent (or technically its parent is null).\r\n   * @returns {boolean} A flag indicating whether or not this tree is the root.\r\n   */\r\n  public isRoot(): boolean {\r\n    return isNil(this.parent);\r\n  }\r\n\r\n  /**\r\n   * Check whether provided tree is a sibling of the current tree. Sibling trees (nodes) are the trees that have the same parent.\r\n   * @param {Tree} tree - A tree that should be tested on a siblingness.\r\n   * @returns {boolean} A flag indicating whether or not provided tree is the sibling of the current one.\r\n   */\r\n  public hasSibling(tree: Tree): boolean {\r\n    return !this.isRoot() && includes(this.parent.children, tree);\r\n  }\r\n\r\n  /**\r\n   * Check whether provided tree is a child of the current tree.\r\n   * This method tests that provided tree is a <strong>direct</strong> child of the current tree.\r\n   * @param {Tree} tree - A tree that should be tested (child candidate).\r\n   * @returns {boolean} A flag indicating whether provided tree is a child or not.\r\n   */\r\n  public hasChild(tree: Tree): boolean {\r\n    return includes(this._children, tree);\r\n  }\r\n\r\n  /**\r\n   * Remove given tree from the current tree.\r\n   * The given tree will be removed only in case it is a direct child of the current tree (@see {@link hasChild}).\r\n   * @param {Tree} tree - A tree that should be removed.\r\n   */\r\n  public removeChild(tree: Tree): void {\r\n    if (!this.hasChildren()) {\r\n      return;\r\n    }\r\n\r\n    const childIndex = this._children.findIndex((child: Tree) => child === tree);\r\n    if (childIndex >= 0) {\r\n      this._children.splice(childIndex, 1);\r\n    }\r\n    this._setFoldingType();\r\n  }\r\n\r\n  /**\r\n   * Remove current tree from its parent.\r\n   */\r\n  public removeItselfFromParent(): void {\r\n    if (!this.parent) {\r\n      return;\r\n    }\r\n\r\n    this.parent.removeChild(this);\r\n  }\r\n\r\n  /**\r\n   * Switch folding type of the current tree. \"Leaf\" node cannot switch its folding type cause it doesn't have children, hence nothing to fold.\r\n   * If node is a \"Branch\" and it is expanded, then by invoking current method state of the tree should be switched to \"collapsed\" and vice versa.\r\n   */\r\n  public switchFoldingType(): void {\r\n    if (this.isLeaf() || !this.hasChildren()) {\r\n      return;\r\n    }\r\n\r\n    this.disableCollapseOnInit();\r\n\r\n    this.node._foldingType = this.isNodeExpanded() ? FoldingType.Collapsed : FoldingType.Expanded;\r\n  }\r\n\r\n  /**\r\n   * Check that tree is expanded.\r\n   * @returns {boolean} A flag indicating whether current tree is expanded. Always returns false for the \"Leaf\" tree and for an empty tree.\r\n   */\r\n  public isNodeExpanded(): boolean {\r\n    return this.foldingType === FoldingType.Expanded;\r\n  }\r\n\r\n  /**\r\n   * Check that tree is collapsed.\r\n   * @returns {boolean} A flag indicating whether current tree is collapsed. Always returns false for the \"Leaf\" tree and for an empty tree.\r\n   */\r\n  public isNodeCollapsed(): boolean {\r\n    return this.foldingType === FoldingType.Collapsed;\r\n  }\r\n\r\n  /**\r\n   * Set a current folding type: expanded, collapsed or leaf.\r\n   */\r\n  private _setFoldingType(): void {\r\n    if (this.childrenShouldBeLoaded()) {\r\n      this.node._foldingType = FoldingType.Collapsed;\r\n    } else if (this._children && !isEmpty(this._children)) {\r\n      this.node._foldingType = this.isCollapsedOnInit() ? FoldingType.Collapsed : FoldingType.Expanded;\r\n    } else if (Array.isArray(this._children)) {\r\n      this.node._foldingType = FoldingType.Empty;\r\n    } else {\r\n      this.node._foldingType = FoldingType.Leaf;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a current folding type: expanded, collapsed or leaf.\r\n   * @returns {FoldingType} A folding type of the current tree.\r\n   */\r\n  public get foldingType(): FoldingType {\r\n    if (!this.node._foldingType) {\r\n      this._setFoldingType();\r\n    }\r\n    return this.node._foldingType;\r\n  }\r\n\r\n  /**\r\n   * Get a css class for element which displayes folding state - expanded, collapsed or leaf\r\n   * @returns {string} A string icontaining css class (classes)\r\n   */\r\n  public get foldingCssClass(): string {\r\n    return this.getCssClassesFromSettings() || this.foldingType.cssClass;\r\n  }\r\n\r\n  private getCssClassesFromSettings(): string {\r\n    if (!this.node._foldingType) {\r\n      this._setFoldingType();\r\n    }\r\n\r\n    if (this.node._foldingType === FoldingType.Collapsed) {\r\n      return get(this.node.settings, 'cssClasses.collapsed', null);\r\n    } else if (this.node._foldingType === FoldingType.Expanded) {\r\n      return get(this.node.settings, 'cssClasses.expanded', null);\r\n    } else if (this.node._foldingType === FoldingType.Empty) {\r\n      return get(this.node.settings, 'cssClasses.empty', null);\r\n    }\r\n\r\n    return get(this.node.settings, 'cssClasses.leaf', null);\r\n  }\r\n\r\n  /**\r\n   * Get a html template to render before every node's name.\r\n   * @returns {string} A string representing a html template.\r\n   */\r\n  public get nodeTemplate(): string {\r\n    return this.getTemplateFromSettings();\r\n  }\r\n\r\n  private getTemplateFromSettings(): string {\r\n    if (this.isLeaf()) {\r\n      return get(this.node.settings, 'templates.leaf', '');\r\n    } else {\r\n      return get(this.node.settings, 'templates.node', '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a html template to render for an element activatin left menu of a node.\r\n   * @returns {string} A string representing a html template.\r\n   */\r\n  public get leftMenuTemplate(): string {\r\n    if (this.hasLeftMenu()) {\r\n      return get(this.node.settings, 'templates.leftMenu', '<span></span>');\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public disableCollapseOnInit() {\r\n    if (this.node.settings) {\r\n      this.node.settings.isCollapsedOnInit = false;\r\n    }\r\n  }\r\n\r\n  public isCollapsedOnInit() {\r\n    return !!get(this.node.settings, 'isCollapsedOnInit');\r\n  }\r\n\r\n  public keepNodesInDOM() {\r\n    return get(this.node.settings, 'keepNodesInDOM');\r\n  }\r\n\r\n  /**\r\n   * Check that current tree is newly created (added by user via menu for example). Tree that was built from the TreeModel is not marked as new.\r\n   * @returns {boolean} A flag whether the tree is new.\r\n   */\r\n  public isNew(): boolean {\r\n    return this.node._status === TreeStatus.New;\r\n  }\r\n\r\n  public get id(): number | string {\r\n    return get(this.node, 'id');\r\n  }\r\n\r\n  public set id(id: number | string) {\r\n    this.node.id = id;\r\n  }\r\n\r\n  /**\r\n   * Mark current tree as new (@see {@link isNew}).\r\n   */\r\n  public markAsNew(): void {\r\n    this.node._status = TreeStatus.New;\r\n  }\r\n\r\n  /**\r\n   * Check that current tree is being renamed (it is in the process of its value renaming initiated by a user).\r\n   * @returns {boolean} A flag whether the tree is being renamed.\r\n   */\r\n  public isBeingRenamed(): boolean {\r\n    return this.node._status === TreeStatus.IsBeingRenamed;\r\n  }\r\n\r\n  /**\r\n   * Mark current tree as being renamed (@see {@link isBeingRenamed}).\r\n   */\r\n  public markAsBeingRenamed(): void {\r\n    this.node._status = TreeStatus.IsBeingRenamed;\r\n  }\r\n\r\n  /**\r\n   * Check that current tree is modified (for example it was renamed).\r\n   * @returns {boolean} A flag whether the tree is modified.\r\n   */\r\n  public isModified(): boolean {\r\n    return this.node._status === TreeStatus.Modified;\r\n  }\r\n\r\n  /**\r\n   * Mark current tree as modified (@see {@link isModified}).\r\n   */\r\n  public markAsModified(): void {\r\n    this.node._status = TreeStatus.Modified;\r\n  }\r\n\r\n  /**\r\n   * Makes a clone of an underlying TreeModel instance\r\n   * @returns {TreeModel} a clone of an underlying TreeModel instance\r\n   */\r\n  public toTreeModel(): TreeModel {\r\n    const model = defaultsDeep(this.isLeaf() ? {} : { children: [] }, this.node);\r\n\r\n    if (this.children) {\r\n      this.children.forEach(child => {\r\n        model.children.push(child.toTreeModel());\r\n      });\r\n    }\r\n\r\n    return model;\r\n  }\r\n}\r\n","export enum NodeMenuItemAction {\r\n  NewFolder,\r\n  NewTag,\r\n  Rename,\r\n  Remove,\r\n  Custom\r\n}\r\n\r\nexport enum NodeMenuAction {\r\n  Close\r\n}\r\n\r\nexport interface NodeMenuEvent {\r\n  sender: HTMLElement;\r\n  action: NodeMenuAction;\r\n}\r\n\r\nexport interface NodeMenuItemSelectedEvent {\r\n  nodeMenuItemAction: NodeMenuItemAction;\r\n  nodeMenuItemSelected?: string;\r\n}\r\n","export enum Keys {\r\n  Escape = 27\r\n}\r\n\r\nexport enum MouseButtons {\r\n  Left = 0,\r\n  Right = 2\r\n}\r\n\r\nexport function isLeftButtonClicked(e: MouseEvent): boolean {\r\n  return e.button === MouseButtons.Left;\r\n}\r\n\r\nexport function isRightButtonClicked(e: MouseEvent): boolean {\r\n  return e.button === MouseButtons.Right;\r\n}\r\n\r\nexport function isEscapePressed(e: KeyboardEvent): boolean {\r\n  return e.keyCode === Keys.Escape;\r\n}\r\n","import { TreeService } from './tree.service';\r\nimport { Tree } from './tree';\r\nimport { TreeModel } from './tree.types';\r\nimport { NodeMenuItemAction } from './menu/menu.events';\r\nimport { TreeInternalComponent } from './tree-internal.component';\r\nimport { MouseButtons } from './utils/event.utils';\r\nimport { get } from './utils/fn.utils';\r\n\r\nexport class TreeController {\r\n  private tree: Tree;\r\n  private treeService: TreeService;\r\n\r\n  constructor(private component: TreeInternalComponent) {\r\n    this.tree = this.component.tree;\r\n    this.treeService = this.component.treeService;\r\n  }\r\n\r\n  public select(): void {\r\n    if (!this.isSelected()) {\r\n      this.component.onNodeSelected({ button: MouseButtons.Left });\r\n    }\r\n  }\r\n\r\n  public unselect(): void {\r\n    if (this.isSelected()) {\r\n      this.component.onNodeUnselected({ button: MouseButtons.Left });\r\n    }\r\n  }\r\n\r\n  public isSelected(): boolean {\r\n    return this.component.isSelected;\r\n  }\r\n\r\n  public expand(): void {\r\n    if (this.isCollapsed()) {\r\n      this.component.onSwitchFoldingType();\r\n    }\r\n  }\r\n\r\n  public expandToParent(tree: any = this.tree): void {\r\n    if (tree) {\r\n      const controller = this.treeService.getController(tree.id);\r\n      if (controller) {\r\n        requestAnimationFrame(() => {\r\n          controller.expand();\r\n          this.expandToParent(tree.parent);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public isExpanded(): boolean {\r\n    return this.tree.isNodeExpanded();\r\n  }\r\n\r\n  public collapse(): void {\r\n    if (this.isExpanded()) {\r\n      this.component.onSwitchFoldingType();\r\n    }\r\n  }\r\n\r\n  public isCollapsed(): boolean {\r\n    return this.tree.isNodeCollapsed();\r\n  }\r\n\r\n  public toTreeModel(): TreeModel {\r\n    return this.tree.toTreeModel();\r\n  }\r\n\r\n  public rename(newValue: string): void {\r\n    this.tree.markAsBeingRenamed();\r\n    this.component.applyNewValue({ type: 'keyup', value: newValue });\r\n  }\r\n\r\n  public remove(): void {\r\n    this.component.onMenuItemSelected({ nodeMenuItemAction: NodeMenuItemAction.Remove });\r\n  }\r\n\r\n  public addChild(newNode: TreeModel): void {\r\n    if (this.tree.hasDeferredChildren() && !this.tree.childrenWereLoaded()) {\r\n      return;\r\n    }\r\n\r\n    const newTree = this.tree.createNode(Array.isArray(newNode.children), newNode);\r\n    this.treeService.fireNodeCreated(newTree);\r\n  }\r\n\r\n  public addChildAsync(newNode: TreeModel): Promise<Tree> {\r\n    if (this.tree.hasDeferredChildren() && !this.tree.childrenWereLoaded()) {\r\n      return Promise.reject(\r\n        new Error('This node loads its children asynchronously, hence child cannot be added this way')\r\n      );\r\n    }\r\n\r\n    const newTree = this.tree.createNode(Array.isArray(newNode.children), newNode);\r\n    this.treeService.fireNodeCreated(newTree);\r\n\r\n    // This will give TreeInternalComponent to set up a controller for the node\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(newTree);\r\n      });\r\n    });\r\n  }\r\n\r\n  public changeNodeId(id: string | number) {\r\n    if (!id) {\r\n      throw Error('You should supply an id!');\r\n    }\r\n\r\n    if (this.treeService.hasController(id)) {\r\n      throw Error(`Controller already exists for the given id: ${id}`);\r\n    }\r\n\r\n    this.treeService.deleteController(this.tree.id);\r\n    this.tree.id = id;\r\n    this.treeService.setController(this.tree.id, this);\r\n  }\r\n\r\n  public reloadChildren(): void {\r\n    this.tree.reloadChildren();\r\n  }\r\n\r\n  public setChildren(children: TreeModel[]): void {\r\n    if (!this.tree.isLeaf()) {\r\n      this.tree.setChildren(children);\r\n    }\r\n  }\r\n\r\n  public startRenaming(): void {\r\n    this.tree.markAsBeingRenamed();\r\n  }\r\n\r\n  public check(): void {\r\n    this.component.onNodeChecked();\r\n  }\r\n\r\n  public uncheck(): void {\r\n    this.component.onNodeUnchecked();\r\n  }\r\n\r\n  public isChecked(): boolean {\r\n    return this.tree.checked;\r\n  }\r\n\r\n  public isIndetermined(): boolean {\r\n    return get(this.component, 'checkboxElementRef.nativeElement.indeterminate');\r\n  }\r\n\r\n  public allowSelection() {\r\n    this.tree.selectionAllowed = true;\r\n  }\r\n\r\n  public forbidSelection() {\r\n    this.tree.selectionAllowed = false;\r\n  }\r\n\r\n  public isSelectionAllowed(): boolean {\r\n    return this.tree.selectionAllowed;\r\n  }\r\n}\r\n","export type NodeEditableEventType = 'blur' | 'keyup';\r\n\r\nexport enum NodeEditableEventAction {\r\n  Cancel\r\n}\r\n\r\nexport interface NodeEditableEvent {\r\n  value: string;\r\n  type: NodeEditableEventType;\r\n  action?: NodeEditableEventAction;\r\n}\r\n","import { ElementRef, Injectable } from '@angular/core';\r\nimport { NodeMenuAction, NodeMenuEvent } from './menu.events';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class NodeMenuService {\r\n  public nodeMenuEvents$: Subject<NodeMenuEvent> = new Subject<NodeMenuEvent>();\r\n\r\n  public fireMenuEvent(sender: HTMLElement, action: NodeMenuAction): void {\r\n    const nodeMenuEvent: NodeMenuEvent = { sender, action };\r\n    this.nodeMenuEvents$.next(nodeMenuEvent);\r\n  }\r\n\r\n  public hideMenuStream(treeElementRef: ElementRef): Observable<any> {\r\n    return this.nodeMenuEvents$.pipe(\r\n      filter((e: NodeMenuEvent) => treeElementRef.nativeElement !== e.sender),\r\n      filter((e: NodeMenuEvent) => e.action === NodeMenuAction.Close)\r\n    );\r\n  }\r\n\r\n  public hideMenuForAllNodesExcept(treeElementRef: ElementRef): void {\r\n    this.nodeMenuEvents$.next({\r\n      sender: treeElementRef.nativeElement,\r\n      action: NodeMenuAction.Close\r\n    });\r\n  }\r\n}\r\n","import { Tree } from '../tree';\r\nimport { ElementRef } from '@angular/core';\r\n\r\nexport class CapturedNode {\r\n  public constructor(private anElement: ElementRef, private aTree: Tree) {}\r\n\r\n  public canBeDroppedAt(element: ElementRef): boolean {\r\n    return !this.sameAs(element) && !this.contains(element);\r\n  }\r\n\r\n  public contains(other: ElementRef): boolean {\r\n    return this.element.nativeElement.contains(other.nativeElement);\r\n  }\r\n\r\n  public sameAs(other: ElementRef): boolean {\r\n    return this.element === other;\r\n  }\r\n\r\n  public get element(): ElementRef {\r\n    return this.anElement;\r\n  }\r\n\r\n  public get tree(): Tree {\r\n    return this.aTree;\r\n  }\r\n}\r\n","import { Directive, ElementRef, Inject, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { NodeDraggableService } from './node-draggable.service';\r\nimport { CapturedNode } from './captured-node';\r\nimport { Tree } from '../tree';\r\n\r\n@Directive({\r\n  selector: '[nodeDraggable]'\r\n})\r\nexport class NodeDraggableDirective implements OnDestroy, OnInit {\r\n  public static DATA_TRANSFER_STUB_DATA = 'some browsers enable drag-n-drop only when dataTransfer has data';\r\n\r\n  @Input() public nodeDraggable: ElementRef;\r\n\r\n  @Input() public tree: Tree;\r\n\r\n  private nodeNativeElement: HTMLElement;\r\n  private disposersForDragListeners: (() => void)[] = [];\r\n\r\n  public constructor(\r\n    @Inject(ElementRef) public element: ElementRef,\r\n    @Inject(NodeDraggableService) private nodeDraggableService: NodeDraggableService,\r\n    @Inject(Renderer2) private renderer: Renderer2\r\n  ) {\r\n    this.nodeNativeElement = element.nativeElement;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    if (!this.tree.isStatic()) {\r\n      this.renderer.setAttribute(this.nodeNativeElement, 'draggable', 'true');\r\n      this.disposersForDragListeners.push(\r\n        this.renderer.listen(this.nodeNativeElement, 'dragenter', this.handleDragEnter.bind(this))\r\n      );\r\n      this.disposersForDragListeners.push(\r\n        this.renderer.listen(this.nodeNativeElement, 'dragover', this.handleDragOver.bind(this))\r\n      );\r\n      this.disposersForDragListeners.push(\r\n        this.renderer.listen(this.nodeNativeElement, 'dragstart', this.handleDragStart.bind(this))\r\n      );\r\n      this.disposersForDragListeners.push(\r\n        this.renderer.listen(this.nodeNativeElement, 'dragleave', this.handleDragLeave.bind(this))\r\n      );\r\n      this.disposersForDragListeners.push(\r\n        this.renderer.listen(this.nodeNativeElement, 'drop', this.handleDrop.bind(this))\r\n      );\r\n      this.disposersForDragListeners.push(\r\n        this.renderer.listen(this.nodeNativeElement, 'dragend', this.handleDragEnd.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    /* tslint:disable:typedef */\r\n    this.disposersForDragListeners.forEach(dispose => dispose());\r\n    /* tslint:enable:typedef */\r\n  }\r\n\r\n  private handleDragStart(e: DragEvent): any {\r\n    if (e.stopPropagation) {\r\n      e.stopPropagation();\r\n    }\r\n\r\n    this.nodeDraggableService.captureNode(new CapturedNode(this.nodeDraggable, this.tree));\r\n\r\n    e.dataTransfer.setData('text', NodeDraggableDirective.DATA_TRANSFER_STUB_DATA);\r\n    e.dataTransfer.effectAllowed = 'move';\r\n  }\r\n\r\n  private handleDragOver(e: DragEvent): any {\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = 'move';\r\n  }\r\n\r\n  private handleDragEnter(e: DragEvent): any {\r\n    e.preventDefault();\r\n    if (this.containsElementAt(e)) {\r\n      this.addClass('over-drop-target');\r\n    }\r\n  }\r\n\r\n  private handleDragLeave(e: DragEvent): any {\r\n    if (!this.containsElementAt(e)) {\r\n      this.removeClass('over-drop-target');\r\n    }\r\n  }\r\n\r\n  private handleDrop(e: DragEvent): any {\r\n    e.preventDefault();\r\n    if (e.stopPropagation) {\r\n      e.stopPropagation();\r\n    }\r\n\r\n    this.removeClass('over-drop-target');\r\n\r\n    if (!this.isDropPossible(e)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.nodeDraggableService.getCapturedNode()) {\r\n      return this.notifyThatNodeWasDropped();\r\n    }\r\n  }\r\n\r\n  private isDropPossible(e: DragEvent): boolean {\r\n    const capturedNode = this.nodeDraggableService.getCapturedNode();\r\n    return capturedNode && capturedNode.canBeDroppedAt(this.nodeDraggable) && this.containsElementAt(e);\r\n  }\r\n\r\n  private handleDragEnd(e: DragEvent): any {\r\n    this.removeClass('over-drop-target');\r\n    this.nodeDraggableService.releaseCapturedNode();\r\n  }\r\n\r\n  private containsElementAt(e: DragEvent): boolean {\r\n    const { x = e.clientX, y = e.clientY } = e;\r\n    return this.nodeNativeElement.contains(document.elementFromPoint(x, y));\r\n  }\r\n\r\n  private addClass(className: string): void {\r\n    const classList: DOMTokenList = this.nodeNativeElement.classList;\r\n    classList.add(className);\r\n  }\r\n\r\n  private removeClass(className: string): void {\r\n    const classList: DOMTokenList = this.nodeNativeElement.classList;\r\n    classList.remove(className);\r\n  }\r\n\r\n  private notifyThatNodeWasDropped(): void {\r\n    this.nodeDraggableService.fireNodeDragged(this.nodeDraggableService.getCapturedNode(), this.nodeDraggable);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { NodeEditableEvent, NodeEditableEventAction } from './editable.events';\r\n\r\n@Directive({\r\n  selector: '[nodeEditable]'\r\n})\r\nexport class NodeEditableDirective implements OnInit {\r\n  /* tslint:disable:no-input-rename */\r\n  @Input('nodeEditable') public nodeValue: string;\r\n  /* tslint:enable:no-input-rename */\r\n\r\n  @Output() public valueChanged: EventEmitter<NodeEditableEvent> = new EventEmitter<NodeEditableEvent>(false);\r\n\r\n  public constructor(\r\n    @Inject(Renderer2) private renderer: Renderer2,\r\n    @Inject(ElementRef) private elementRef: ElementRef\r\n  ) {}\r\n\r\n  public ngOnInit(): void {\r\n    const nativeElement = this.elementRef.nativeElement;\r\n\r\n    if (nativeElement) {\r\n      nativeElement.focus();\r\n    }\r\n\r\n    this.renderer.setProperty(nativeElement, 'value', this.nodeValue);\r\n  }\r\n\r\n  @HostListener('keyup.enter', ['$event.target.value'])\r\n  public applyNewValue(newNodeValue: string): void {\r\n    this.valueChanged.emit({ type: 'keyup', value: newNodeValue });\r\n  }\r\n\r\n  @HostListener('blur', ['$event.target.value'])\r\n  public applyNewValueByLoosingFocus(newNodeValue: string): void {\r\n    this.valueChanged.emit({ type: 'blur', value: newNodeValue });\r\n  }\r\n\r\n  @HostListener('keyup.esc')\r\n  public cancelEditing(): void {\r\n    this.valueChanged.emit({\r\n      type: 'keyup',\r\n      value: this.nodeValue,\r\n      action: NodeEditableEventAction.Cancel\r\n    });\r\n  }\r\n}\r\n","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, Renderer2, ViewChild } from '@angular/core';\r\nimport { NodeMenuService } from './node-menu.service';\r\nimport { NodeMenuAction, NodeMenuItemAction, NodeMenuItemSelectedEvent } from './menu.events';\r\nimport { isEscapePressed, isLeftButtonClicked } from '../utils/event.utils';\r\n\r\n@Component({\r\n  selector: 'node-menu',\r\n  template: `\r\n    <div class=\"node-menu\">\r\n      <ul class=\"node-menu-content\" #menuContainer>\r\n        <li class=\"node-menu-item\" *ngFor=\"let menuItem of availableMenuItems\"\r\n          (click)=\"onMenuItemSelected($event, menuItem)\">\r\n          <div class=\"node-menu-item-icon {{menuItem.cssClass}}\"></div>\r\n          <span class=\"node-menu-item-value\">{{menuItem.name}}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  `\r\n})\r\nexport class NodeMenuComponent implements OnInit, OnDestroy {\r\n  @Output()\r\n  public menuItemSelected: EventEmitter<NodeMenuItemSelectedEvent> = new EventEmitter<NodeMenuItemSelectedEvent>();\r\n\r\n  @Input() public menuItems: NodeMenuItem[];\r\n\r\n  @ViewChild('menuContainer', { static: false })\r\n  public menuContainer: any;\r\n\r\n  public availableMenuItems: NodeMenuItem[] = [\r\n    {\r\n      name: 'New tag',\r\n      action: NodeMenuItemAction.NewTag,\r\n      cssClass: 'new-tag'\r\n    },\r\n    {\r\n      name: 'New folder',\r\n      action: NodeMenuItemAction.NewFolder,\r\n      cssClass: 'new-folder'\r\n    },\r\n    {\r\n      name: 'Rename',\r\n      action: NodeMenuItemAction.Rename,\r\n      cssClass: 'rename'\r\n    },\r\n    {\r\n      name: 'Remove',\r\n      action: NodeMenuItemAction.Remove,\r\n      cssClass: 'remove'\r\n    }\r\n  ];\r\n\r\n  private disposersForGlobalListeners: (() => void)[] = [];\r\n\r\n  public constructor(\r\n    @Inject(Renderer2) private renderer: Renderer2,\r\n    @Inject(NodeMenuService) private nodeMenuService: NodeMenuService\r\n  ) {}\r\n\r\n  public ngOnInit(): void {\r\n    this.availableMenuItems = this.menuItems || this.availableMenuItems;\r\n    this.disposersForGlobalListeners.push(this.renderer.listen('document', 'keyup', this.closeMenu.bind(this)));\r\n    this.disposersForGlobalListeners.push(this.renderer.listen('document', 'mousedown', this.closeMenu.bind(this)));\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.disposersForGlobalListeners.forEach((dispose: () => void) => dispose());\r\n  }\r\n\r\n  public onMenuItemSelected(e: MouseEvent, selectedMenuItem: NodeMenuItem): void {\r\n    if (isLeftButtonClicked(e)) {\r\n      this.menuItemSelected.emit({\r\n        nodeMenuItemAction: selectedMenuItem.action,\r\n        nodeMenuItemSelected: selectedMenuItem.name\r\n      });\r\n\r\n      this.nodeMenuService.fireMenuEvent(e.target as HTMLElement, NodeMenuAction.Close);\r\n    }\r\n  }\r\n\r\n  private closeMenu(e: MouseEvent | KeyboardEvent): void {\r\n    const mouseClicked = e instanceof MouseEvent;\r\n    // Check if the click is fired on an element inside a menu\r\n    const containingTarget =\r\n      this.menuContainer.nativeElement !== e.target && this.menuContainer.nativeElement.contains(e.target);\r\n\r\n    if ((mouseClicked && !containingTarget) || isEscapePressed(e as KeyboardEvent)) {\r\n      this.nodeMenuService.fireMenuEvent(e.target as HTMLElement, NodeMenuAction.Close);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface NodeMenuItem {\r\n  name: string;\r\n  action: NodeMenuItemAction;\r\n  cssClass?: string;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  public constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  public transform(value: string): SafeHtml {\r\n    // return value;\r\n    return this.sanitizer.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nimport * as TreeTypes from './tree.types';\r\nimport { Ng2TreeSettings } from './tree.types';\r\nimport { Tree } from './tree';\r\nimport { TreeController } from './tree-controller';\r\nimport { NodeMenuService } from './menu/node-menu.service';\r\nimport { NodeMenuItemAction, NodeMenuItemSelectedEvent } from './menu/menu.events';\r\nimport { NodeEditableEvent, NodeEditableEventAction } from './editable/editable.events';\r\nimport { NodeCheckedEvent, NodeEvent } from './tree.events';\r\nimport { TreeService } from './tree.service';\r\nimport * as EventUtils from './utils/event.utils';\r\nimport { NodeDraggableEvent } from './draggable/draggable.events';\r\nimport { get, isNil } from './utils/fn.utils';\r\nimport { Subscription } from 'rxjs';\r\nimport { merge, of } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'tree-internal',\r\n  template: `\r\n  <ul class=\"tree\" *ngIf=\"tree\" [ngClass]=\"{rootless: isRootHidden()}\">\r\n    <li>\r\n      <div class=\"value-container\"\r\n        [ngClass]=\"{rootless: isRootHidden()}\"\r\n        [class.selected]=\"isSelected\"\r\n        (contextmenu)=\"showRightMenu($event)\"\r\n        [nodeDraggable]=\"nodeElementRef\"\r\n        [tree]=\"tree\">\r\n\r\n        <div class=\"folding\" (click)=\"onSwitchFoldingType()\" [ngClass]=\"tree.foldingCssClass\"></div>\r\n\r\n        <div class=\"node-checkbox\" *ngIf=\"settings.showCheckboxes\">\r\n        <input checkbox  type=\"checkbox\" [disabled]=\"isReadOnly\" [checked]=\"this.tree.checked\" (change)=\"switchNodeCheckStatus()\" #checkbox />\r\n         </div>\r\n\r\n        <div class=\"node-value\"\r\n          *ngIf=\"!shouldShowInputForTreeValue()\"\r\n          [class.node-selected]=\"isSelected\"\r\n          (click)=\"onNodeSelected($event)\">\r\n            <div *ngIf=\"tree.nodeTemplate\" class=\"node-template\" [innerHTML]=\"tree.nodeTemplate | safeHtml\"></div>\r\n            <span *ngIf=\"!template\" class=\"node-name\" [innerHTML]=\"tree.value | safeHtml\"></span>\r\n            <span class=\"loading-children\" *ngIf=\"tree.childrenAreBeingLoaded()\"></span>\r\n            <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: tree.node }\"></ng-template>\r\n        </div>\r\n\r\n        <input type=\"text\" class=\"node-value\"\r\n           *ngIf=\"shouldShowInputForTreeValue()\"\r\n           [nodeEditable]=\"tree.value\"\r\n           (valueChanged)=\"applyNewValue($event)\"/>\r\n\r\n        <div class=\"node-left-menu\" *ngIf=\"tree.hasLeftMenu()\" (click)=\"showLeftMenu($event)\" [innerHTML]=\"tree.leftMenuTemplate\">\r\n        </div>\r\n        <node-menu *ngIf=\"tree.hasLeftMenu() && isLeftMenuVisible && !hasCustomMenu()\"\r\n          (menuItemSelected)=\"onMenuItemSelected($event)\">\r\n        </node-menu>\r\n      </div>\r\n\r\n      <node-menu *ngIf=\"isRightMenuVisible && !hasCustomMenu()\"\r\n           (menuItemSelected)=\"onMenuItemSelected($event)\">\r\n      </node-menu>\r\n\r\n      <node-menu *ngIf=\"hasCustomMenu() && (isRightMenuVisible || isLeftMenuVisible)\"\r\n           [menuItems]=\"tree.menuItems\"\r\n           (menuItemSelected)=\"onMenuItemSelected($event)\">\r\n      </node-menu>\r\n\r\n      <div *ngIf=\"tree.keepNodesInDOM()\" [ngStyle]=\"{'display': tree.isNodeExpanded() ? 'block' : 'none'}\">\r\n        <tree-internal *ngFor=\"let child of tree.childrenAsync | async\" [tree]=\"child\" [template]=\"template\" [settings]=\"settings\"></tree-internal>\r\n      </div>\r\n      <ng-template [ngIf]=\"tree.isNodeExpanded() && !tree.keepNodesInDOM()\">\r\n        <tree-internal *ngFor=\"let child of tree.childrenAsync | async\" [tree]=\"child\" [template]=\"template\" [settings]=\"settings\"></tree-internal>\r\n      </ng-template>\r\n    </li>\r\n  </ul>\r\n  `\r\n})\r\nexport class TreeInternalComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\r\n  @Input() public tree: Tree;\r\n\r\n  @Input() public settings: TreeTypes.Ng2TreeSettings;\r\n\r\n  @Input() public template: TemplateRef<any>;\r\n\r\n  public isSelected = false;\r\n  public isRightMenuVisible = false;\r\n  public isLeftMenuVisible = false;\r\n  public isReadOnly = false;\r\n  public controller: TreeController;\r\n\r\n  @ViewChild('checkbox', { static: false })\r\n  public checkboxElementRef: ElementRef;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  public constructor(\r\n    private nodeMenuService: NodeMenuService,\r\n    public treeService: TreeService,\r\n    public nodeElementRef: ElementRef\r\n  ) {}\r\n\r\n  public ngAfterViewInit(): void {\r\n    if (this.tree.checked && !(this.tree as any).firstCheckedFired) {\r\n      (this.tree as any).firstCheckedFired = true;\r\n      this.treeService.fireNodeChecked(this.tree);\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    const nodeId = get(this.tree, 'node.id', '');\r\n    if (nodeId) {\r\n      this.controller = new TreeController(this);\r\n      this.treeService.setController(nodeId, this.controller);\r\n    }\r\n\r\n    this.settings = this.settings || new Ng2TreeSettings();\r\n    this.isReadOnly = !get(this.settings, 'enableCheckboxes', true);\r\n\r\n    if (this.tree.isRoot() && this.settings.rootIsVisible === false) {\r\n      this.tree.disableCollapseOnInit();\r\n    }\r\n\r\n    this.subscriptions.push(\r\n      this.nodeMenuService.hideMenuStream(this.nodeElementRef).subscribe(() => {\r\n        this.isRightMenuVisible = false;\r\n        this.isLeftMenuVisible = false;\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(this.treeService.unselectStream(this.tree).subscribe(() => (this.isSelected = false)));\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.draggedStream(this.tree, this.nodeElementRef).subscribe((e: NodeDraggableEvent) => {\r\n        if (this.tree.hasSibling(e.captured.tree)) {\r\n          this.swapWithSibling(e.captured.tree, this.tree);\r\n        } else if (this.tree.isBranch()) {\r\n          this.moveNodeToThisTreeAndRemoveFromPreviousOne(e, this.tree);\r\n        } else {\r\n          this.moveNodeToParentTreeAndRemoveFromPreviousOne(e, this.tree);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      merge(this.treeService.nodeChecked$, this.treeService.nodeUnchecked$)\r\n        .pipe(filter((e: NodeCheckedEvent) => this.eventContainsId(e) && this.tree.hasChild(e.node)))\r\n        .subscribe((e: NodeCheckedEvent) => this.updateCheckboxState())\r\n    );\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    this.controller = new TreeController(this);\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (get(this.tree, 'node.id', '')) {\r\n      this.treeService.deleteController(this.tree.node.id);\r\n    }\r\n\r\n    this.subscriptions.forEach(sub => sub && sub.unsubscribe());\r\n  }\r\n\r\n  private swapWithSibling(sibling: Tree, tree: Tree): void {\r\n    tree.swapWithSibling(sibling);\r\n    this.treeService.fireNodeMoved(sibling, sibling.parent);\r\n  }\r\n\r\n  private moveNodeToThisTreeAndRemoveFromPreviousOne(e: NodeDraggableEvent, tree: Tree): void {\r\n    this.treeService.fireNodeRemoved(e.captured.tree);\r\n    const addedChild = tree.addChild(e.captured.tree);\r\n    this.treeService.fireNodeMoved(addedChild, e.captured.tree.parent);\r\n  }\r\n\r\n  private moveNodeToParentTreeAndRemoveFromPreviousOne(e: NodeDraggableEvent, tree: Tree): void {\r\n    this.treeService.fireNodeRemoved(e.captured.tree);\r\n    const addedSibling = tree.addSibling(e.captured.tree, tree.positionInParent);\r\n    this.treeService.fireNodeMoved(addedSibling, e.captured.tree.parent);\r\n  }\r\n\r\n  public onNodeSelected(e: { button: number }): void {\r\n    if (!this.tree.selectionAllowed) {\r\n      return;\r\n    }\r\n\r\n    if (EventUtils.isLeftButtonClicked(e as MouseEvent)) {\r\n      this.isSelected = true;\r\n      this.treeService.fireNodeSelected(this.tree);\r\n    }\r\n  }\r\n\r\n  public onNodeUnselected(e: { button: number }): void {\r\n    if (!this.tree.selectionAllowed) {\r\n      return;\r\n    }\r\n\r\n    if (EventUtils.isLeftButtonClicked(e as MouseEvent)) {\r\n      this.isSelected = false;\r\n      this.treeService.fireNodeUnselected(this.tree);\r\n    }\r\n  }\r\n\r\n  public showRightMenu(e: MouseEvent): void {\r\n    if (!this.tree.hasRightMenu()) {\r\n      return;\r\n    }\r\n\r\n    if (EventUtils.isRightButtonClicked(e)) {\r\n      this.isRightMenuVisible = !this.isRightMenuVisible;\r\n      this.nodeMenuService.hideMenuForAllNodesExcept(this.nodeElementRef);\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  public showLeftMenu(e: MouseEvent): void {\r\n    if (!this.tree.hasLeftMenu()) {\r\n      return;\r\n    }\r\n\r\n    if (EventUtils.isLeftButtonClicked(e)) {\r\n      this.isLeftMenuVisible = !this.isLeftMenuVisible;\r\n      this.nodeMenuService.hideMenuForAllNodesExcept(this.nodeElementRef);\r\n      if (this.isLeftMenuVisible) {\r\n        e.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  public onMenuItemSelected(e: NodeMenuItemSelectedEvent): void {\r\n    switch (e.nodeMenuItemAction) {\r\n      case NodeMenuItemAction.NewTag:\r\n        this.onNewSelected(e);\r\n        break;\r\n      case NodeMenuItemAction.NewFolder:\r\n        this.onNewSelected(e);\r\n        break;\r\n      case NodeMenuItemAction.Rename:\r\n        this.onRenameSelected();\r\n        break;\r\n      case NodeMenuItemAction.Remove:\r\n        this.onRemoveSelected();\r\n        break;\r\n      case NodeMenuItemAction.Custom:\r\n        this.onCustomSelected();\r\n        this.treeService.fireMenuItemSelected(this.tree, e.nodeMenuItemSelected);\r\n        break;\r\n      default:\r\n        throw new Error(`Chosen menu item doesn't exist`);\r\n    }\r\n  }\r\n\r\n  private onNewSelected(e: NodeMenuItemSelectedEvent): void {\r\n    this.tree.createNode(e.nodeMenuItemAction === NodeMenuItemAction.NewFolder);\r\n    this.isRightMenuVisible = false;\r\n    this.isLeftMenuVisible = false;\r\n  }\r\n\r\n  private onRenameSelected(): void {\r\n    this.tree.markAsBeingRenamed();\r\n    this.isRightMenuVisible = false;\r\n    this.isLeftMenuVisible = false;\r\n  }\r\n\r\n  private onRemoveSelected(): void {\r\n    this.treeService.deleteController(get(this.tree, 'node.id', ''));\r\n    this.treeService.fireNodeRemoved(this.tree);\r\n  }\r\n\r\n  private onCustomSelected(): void {\r\n    this.isRightMenuVisible = false;\r\n    this.isLeftMenuVisible = false;\r\n  }\r\n\r\n  public onSwitchFoldingType(): void {\r\n    this.tree.switchFoldingType();\r\n    this.treeService.fireNodeSwitchFoldingType(this.tree);\r\n  }\r\n\r\n  public applyNewValue(e: NodeEditableEvent): void {\r\n    if ((e.action === NodeEditableEventAction.Cancel || this.tree.isNew()) && Tree.isValueEmpty(e.value)) {\r\n      return this.treeService.fireNodeRemoved(this.tree);\r\n    }\r\n\r\n    if (this.tree.isNew()) {\r\n      this.tree.value = e.value;\r\n      this.treeService.fireNodeCreated(this.tree);\r\n    }\r\n\r\n    if (this.tree.isBeingRenamed()) {\r\n      const oldValue = this.tree.value;\r\n      this.tree.value = e.value;\r\n      this.treeService.fireNodeRenamed(oldValue, this.tree);\r\n    }\r\n\r\n    this.tree.markAsModified();\r\n  }\r\n\r\n  public shouldShowInputForTreeValue(): boolean {\r\n    return this.tree.isNew() || this.tree.isBeingRenamed();\r\n  }\r\n\r\n  public isRootHidden(): boolean {\r\n    return this.tree.isRoot() && !this.settings.rootIsVisible;\r\n  }\r\n\r\n  public hasCustomMenu(): boolean {\r\n    return this.tree.hasCustomMenu();\r\n  }\r\n\r\n  public switchNodeCheckStatus() {\r\n    if (!this.tree.checked) {\r\n      this.onNodeChecked();\r\n    } else {\r\n      this.onNodeUnchecked();\r\n    }\r\n  }\r\n\r\n  public onNodeChecked(): void {\r\n    if (!this.checkboxElementRef) {\r\n      return;\r\n    }\r\n\r\n    this.checkboxElementRef.nativeElement.indeterminate = false;\r\n    this.treeService.fireNodeChecked(this.tree);\r\n    this.executeOnChildController(controller => controller.check());\r\n    this.tree.checked = true;\r\n  }\r\n\r\n  public onNodeUnchecked(): void {\r\n    if (!this.checkboxElementRef) {\r\n      return;\r\n    }\r\n\r\n    this.checkboxElementRef.nativeElement.indeterminate = false;\r\n    this.treeService.fireNodeUnchecked(this.tree);\r\n    this.executeOnChildController(controller => controller.uncheck());\r\n    this.tree.checked = false;\r\n  }\r\n\r\n  private executeOnChildController(executor: (controller: TreeController) => void) {\r\n    if (this.tree.hasLoadedChildern()) {\r\n      this.tree.children.forEach((child: Tree) => {\r\n        const controller = this.treeService.getController(child.id);\r\n        if (!isNil(controller)) {\r\n          executor(controller);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  updateCheckboxState(): void {\r\n    // Calling setTimeout so the value of isChecked will be updated and after that I'll check the children status.\r\n    setTimeout(() => {\r\n      const checkedChildrenAmount = this.tree.checkedChildrenAmount();\r\n      if (checkedChildrenAmount === 0) {\r\n        this.checkboxElementRef.nativeElement.indeterminate = false;\r\n        this.tree.checked = false;\r\n        this.treeService.fireNodeUnchecked(this.tree);\r\n      } else if (checkedChildrenAmount === this.tree.loadedChildrenAmount()) {\r\n        this.checkboxElementRef.nativeElement.indeterminate = false;\r\n        this.tree.checked = true;\r\n        this.treeService.fireNodeChecked(this.tree);\r\n      } else {\r\n        this.tree.checked = false;\r\n        this.checkboxElementRef.nativeElement.indeterminate = true;\r\n        this.treeService.fireNodeIndetermined(this.tree);\r\n      }\r\n    });\r\n  }\r\n\r\n  private eventContainsId(event: NodeEvent): boolean {\r\n    if (!event.node.id) {\r\n      console.warn(\r\n        '\"Node with checkbox\" feature requires a unique id assigned to every node, please consider to add it.'\r\n      );\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { TreeService } from './tree.service';\r\nimport * as TreeTypes from './tree.types';\r\n\r\nimport { MenuItemSelectedEvent, NodeCheckedEvent, NodeEvent, NodeUncheckedEvent } from './tree.events';\r\n\r\nimport { Tree } from './tree';\r\nimport { TreeController } from './tree-controller';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'tree',\r\n  template: `<tree-internal #rootComponent [tree]=\"tree\" [settings]=\"settings\" [template]=\"template\"></tree-internal>`,\r\n  providers: [TreeService]\r\n})\r\nexport class TreeComponent implements OnInit, OnChanges, OnDestroy {\r\n  private static EMPTY_TREE: Tree = new Tree({ value: '' });\r\n\r\n  /* tslint:disable:no-input-rename */\r\n  @Input('tree') public treeModel: TreeTypes.TreeModel;\r\n  /* tslint:enable:no-input-rename */\r\n\r\n  @Input() public settings: TreeTypes.Ng2TreeSettings;\r\n\r\n  @Output() public nodeCreated: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeRemoved: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeRenamed: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeSelected: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeUnselected: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeMoved: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeExpanded: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeCollapsed: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public loadNextLevel: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() public nodeChecked: EventEmitter<NodeCheckedEvent> = new EventEmitter();\r\n\r\n  @Output() public nodeUnchecked: EventEmitter<NodeUncheckedEvent> = new EventEmitter();\r\n\r\n  @Output() public menuItemSelected: EventEmitter<any> = new EventEmitter();\r\n\r\n  public tree: Tree;\r\n\r\n  @ViewChild('rootComponent', { static: false })\r\n  public rootComponent;\r\n\r\n  @ContentChild(TemplateRef, { static: false })\r\n  public template;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  public constructor(@Inject(TreeService) private treeService: TreeService) {}\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.treeModel) {\r\n      this.tree = TreeComponent.EMPTY_TREE;\r\n    } else {\r\n      this.tree = new Tree(this.treeModel);\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.subscriptions.push(\r\n      this.treeService.nodeRemoved$.subscribe((e: NodeEvent) => {\r\n        this.nodeRemoved.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeRenamed$.subscribe((e: NodeEvent) => {\r\n        this.nodeRenamed.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeCreated$.subscribe((e: NodeEvent) => {\r\n        this.nodeCreated.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeSelected$.subscribe((e: NodeEvent) => {\r\n        this.nodeSelected.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeUnselected$.subscribe((e: NodeEvent) => {\r\n        this.nodeUnselected.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeMoved$.subscribe((e: NodeEvent) => {\r\n        this.nodeMoved.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeExpanded$.subscribe((e: NodeEvent) => {\r\n        this.nodeExpanded.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeCollapsed$.subscribe((e: NodeEvent) => {\r\n        this.nodeCollapsed.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.menuItemSelected$.subscribe((e: MenuItemSelectedEvent) => {\r\n        this.menuItemSelected.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.loadNextLevel$.subscribe((e: NodeEvent) => {\r\n        this.loadNextLevel.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeChecked$.subscribe((e: NodeCheckedEvent) => {\r\n        this.nodeChecked.emit(e);\r\n      })\r\n    );\r\n\r\n    this.subscriptions.push(\r\n      this.treeService.nodeUnchecked$.subscribe((e: NodeUncheckedEvent) => {\r\n        this.nodeUnchecked.emit(e);\r\n      })\r\n    );\r\n  }\r\n\r\n  public getController(): TreeController {\r\n    return this.rootComponent.controller;\r\n  }\r\n\r\n  public getControllerByNodeId(id: number | string): TreeController {\r\n    return this.treeService.getController(id);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub && sub.unsubscribe());\r\n  }\r\n}\r\n","import './rxjs-imports';\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { TreeComponent } from './tree.component';\r\nimport { TreeInternalComponent } from './tree-internal.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NodeDraggableDirective } from './draggable/node-draggable.directive';\r\nimport { NodeDraggableService } from './draggable/node-draggable.service';\r\nimport { NodeEditableDirective } from './editable/node-editable.directive';\r\nimport { NodeMenuComponent } from './menu/node-menu.component';\r\nimport { NodeMenuService } from './menu/node-menu.service';\r\nimport { TreeService } from './tree.service';\r\nimport { SafeHtmlPipe } from './utils/safe-html.pipe';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    NodeDraggableDirective,\r\n    TreeComponent,\r\n    NodeEditableDirective,\r\n    NodeMenuComponent,\r\n    TreeInternalComponent,\r\n    SafeHtmlPipe\r\n  ],\r\n  exports: [TreeComponent],\r\n  providers: [NodeDraggableService, NodeMenuService, TreeService]\r\n})\r\nexport class TreeModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["uuidv4","i1","EventUtils.isLeftButtonClicked","EventUtils.isRightButtonClicked","i1.NodeMenuService","i2.TreeService","i4.NodeDraggableDirective","i5.NodeEditableDirective","i6.NodeMenuComponent","i7.SafeHtmlPipe","i1.TreeInternalComponent"],"mappings":"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"}